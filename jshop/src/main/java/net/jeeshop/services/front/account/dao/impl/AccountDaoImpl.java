package net.jeeshop.services.front.account.dao.impl;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.annotation.Resource;import net.jeeshop.core.dao.BaseDao;import net.jeeshop.core.dao.page.PagerModel;import net.jeeshop.services.common.Code;import net.jeeshop.services.front.account.bean.Account;import net.jeeshop.services.front.account.dao.AccountDao;import org.springframework.stereotype.Repository;@Repository("accountDaoFront")public class AccountDaoImpl implements AccountDao {    @Resource	private BaseDao dao;	public void setDao(BaseDao dao) {		this.dao = dao;	}	public PagerModel selectPageList(Account e) {		return dao.selectPageList("front.account.selectPageList",				"front.account.selectPageCount", e);	}	public List selectList(Account e) {		return dao.selectList("front.account.selectList", e);	}	public Account selectOne(Account e) {		return (Account) dao.selectOne("front.account.selectOne", e);	}	public int delete(Account e) {		return dao.delete("front.account.delete", e);	}	public int update(Account e) {		return dao.update("front.account.update", e);	}	public int deletes(String[] ids) {		Account e = new Account();		for (int i = 0; i < ids.length; i++) {			e.setId(ids[i]);			delete(e);		}		return 0;	}	public int insert(Account e) {		return dao.insert("front.account.insert", e);	}	public int deleteById(int id) {		return dao.delete("front.account.deleteById", id);	}	@Override	public Account selectById(String id) {		return (Account) dao.selectOne("front.account.selectById", id);	}	public int selectCount(Account e) {		return dao.getCount("front.account.selectCount", e);	}	@Override	public void updatePasswordByAccount(Account acc) {		dao.update("front.account.updatePasswordByAccount",acc);			}	@Override	public void updateEmailByAccount(Account acc) {		dao.update("front.account.updateEmailByAccount",acc);	}	@Override	public Account selectAccountScore(String account) {		return (Account) dao.selectOne("front.account.selectAccountScore",account);	}	@Override	public void updateScore(Account acc) {		dao.update("front.account.updateScore",acc);	}	@Override	public Account selectByPhone(Account e) {				return (Account) dao.selectOne("front.account.selectByPhone",e);	}	@Override	public String getAccountCode(HashMap params) {		dao.selectOne("front.account.insertCode",params);		return (String) params.get("accountCode"); 	}		@Override	// 查询所有非系统账号的总数	public int getAllGuestsCount(String cond) {		Map<String, Object> args = new HashMap<String, Object>();		args.put("cond", "%" + cond + "%");		return dao.getCount("front.account.getAllGuestsCount", args);	}		@SuppressWarnings("unchecked")	@Override	// 查询所有非系统账号	public List<Map<String, Object>> getAllGuests(int offset, int pageSize, String cond) {		Map<String, Object> args = new HashMap<String, Object>();		args.put("offset", offset);		args.put("pageSize", pageSize);		args.put("cond", "%" + cond + "%");		return (List<Map<String, Object>>) dao.selectList("front.account.getAllGuests", args);	}}