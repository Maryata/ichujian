package net.jeeshop.web.action.front.orders;import java.io.IOException;import java.text.DecimalFormat;import java.util.Iterator;import java.util.LinkedList;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import net.jeeshop.core.FrontContainer;import net.jeeshop.core.dao.page.PagerModel;import net.jeeshop.core.front.SystemManager;import net.jeeshop.core.util.ApDateTime;import net.jeeshop.core.util.DateTimeUtil;import net.jeeshop.core.util.StrUtils;import net.jeeshop.services.front.account.AccountService;import net.jeeshop.services.front.account.bean.Account;import net.jeeshop.services.front.address.AddressService;import net.jeeshop.services.front.address.bean.Address;import net.jeeshop.services.front.area.bean.Area;import net.jeeshop.services.front.comment.CommentService;import net.jeeshop.services.front.comment.bean.Comment;import net.jeeshop.services.front.express.bean.Express;import net.jeeshop.services.front.make_time.MakeTimeService;import net.jeeshop.services.front.make_time.bean.MakeTime;import net.jeeshop.services.front.order.OrderService;import net.jeeshop.services.front.order.bean.Order;import net.jeeshop.services.front.orderSerialNum.OrderSerialNumService;import net.jeeshop.services.front.orderSerialNum.bean.OrderSerialNum;import net.jeeshop.services.front.orderdetail.OrderdetailService;import net.jeeshop.services.front.orderdetail.bean.Orderdetail;import net.jeeshop.services.front.orderlog.OrderlogService;import net.jeeshop.services.front.orderlog.bean.Orderlog;import net.jeeshop.services.front.ordermain.OrdermainService;import net.jeeshop.services.front.ordermain.bean.Ordermain;import net.jeeshop.services.front.orderpay.OrderpayService;import net.jeeshop.services.front.orderpay.bean.Orderpay;import net.jeeshop.services.front.ordership.OrdershipService;import net.jeeshop.services.front.ordership.bean.Ordership;import net.jeeshop.services.front.product.bean.Product;import net.jeeshop.services.front.product.bean.ProductStockInfo;import net.jeeshop.services.front.unionpay.UnionPayService;import net.jeeshop.services.front.unionpay.bean.UnionPay;import net.jeeshop.services.manage.discntSolutn.DiscntSolutnService;import net.jeeshop.services.manage.notifyTemplate.NotifyTemplateService;import net.jeeshop.web.action.front.FrontBaseController;import net.jeeshop.web.action.front.product.ProductUtil;import net.jeeshop.web.action.front.unionpay.UnionPayAction;import net.jeeshop.web.util.RequestHolder;import org.apache.commons.lang.StringUtils;import org.apache.poi.ss.usermodel.Row;import org.apache.poi.ss.usermodel.Sheet;import org.apache.poi.ss.util.CellRangeAddress;import org.apache.poi.xssf.usermodel.XSSFCellStyle;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import com.google.common.collect.Lists;/** * 门户订单服务类 *  * @author Administrator *  */@Controller("frontOrderAction")@RequestMapping("order")public class OrderAction extends FrontBaseController<Order> {	private static final Logger logger = LoggerFactory.getLogger(OrderAction.class);	//private static final long serialVersionUID = 1L;	@Autowired	private OrderService orderService;	@Autowired	private OrderdetailService orderdetailService;	@Autowired	private OrderpayService orderpayService;	//@Autowired	//private ProductService productService;	@Autowired	private CommentService commentService;	@Autowired	private OrdershipService ordershipService;	@Autowired	private AddressService addressService;	@Autowired	private OrdermainService ordermainService;	@Autowired	private OrderlogService orderlogService;	@Autowired	private DiscntSolutnService dsService;	@Autowired	private NotifyTemplateService notifyTemplateService;	@Autowired	private MakeTimeService makeTimeService;	@Autowired	private UnionPayService unionPayService;	@Autowired	private AccountService accountService;		@Autowired	private OrderSerialNumService orderSerialNumService;//	private List<Order> myOrders;//	private Map<String, Order> orderMap;////	private boolean is_test = false;//是否是测试状态//	private Product product;//用户进行评论时加载的商品信息//	private Comment comment;//用户是否进行过评价；如果此对象不为空，则用户进行过评价////	private String selectLeftMenu;//选中的个人中心的菜单项	@Override	public OrderService getService() {		return orderService;	}	public void setOrderService(OrderService orderService) {		this.orderService = orderService;	}	/**	 * 订单确认页面，点击这个页面的确认支付按钮则会跳转到支付宝等的支付页面	 * 	 * @return	 */	@RequestMapping("orderConfirm")	public String orderConfirm() {		return "/confirmOrder";	}	/*@RequestMapping(value = "pay", method = RequestMethod.POST)	public String pay(Order e, ModelMap model) throws Exception{		return insertAndPay(e, model);	}*/		@RequestMapping(value = "readyOrder", method = RequestMethod.POST)	public String readyOrder (Order e, ModelMap model) throws Exception{		return insertOrder(e, model);	}		@RequestMapping(value = "submitOrder", method = RequestMethod.POST)	public String submitOrder (Order e, ModelMap model) throws Exception{		Account account = getLoginAccount();		if (account == null || StringUtils.isBlank(account.getAccount())				 || StringUtils.isBlank(account.getId())) {			return page_toLoginRedirect;		}				/*** 确认下单  **/		Order order = CartInfoHelp.getInstance().getPreOrder();				if(null==order || StrUtils.isEmpty(order.getAccount())){			logger.error("pc订单为空");			return "redirect:/account/orders.html";		}		Address address = addressService.selectById(order.getSelectAddressID());		if(null==address || StrUtils.isEmpty(address.getName())){			logger.error("pc地址为空");			return "redirect:/account/orders.html";		}		order.setOrderType(e.getOrderType());		order.setConfirmStatus(Order.order_confirmStatus_uy);//用户确认;		order.setStatus(Order.order_status_init);				Ordership ordership = new Ordership();				ordership.setShipname(address.getName());		ordership.setShiparea(address.getPcadetail());		ordership.setShipaddress(address.getAddress());		ordership.setPhone(address.getMobile());		ordership.setTel(address.getPhone());		ordership.setZip(address.getZip());		//省市区 		ordership.setProvince(address.getProvinceAddress());		ordership.setProvinceCode(address.getProvince());		ordership.setAreaCode(address.getArea());		ordership.setArea(address.getAreaAddress());		ordership.setCity(address.getCityAddress());		ordership.setCityCode(address.getCity());						if(("1").equals(e.getIsOtherFee())){//有其他费用 			order.setCommisionStatus("1");//已申请			order.setCommisionTime(ApDateTime.getNowDateTime(ApDateTime.DATE_TIME_SSS));//申请时间			order.setCommisionSale("system");//自动申请是填写system 		}				// 通过调用存储过程获取指定会员工号对应的订单序列号		OrderSerialNum osn = new OrderSerialNum();		osn.setUcode(order.getAccountCode());		String serialNum = orderSerialNumService.getSerialNum(osn);		order.setSerialId(serialNum);		orderService.createOrder(order, order.getOrderdetail(), ordership); //.submitOrder(order,ordership);		// 保存成功后;移除待确认订单ID;切清空购物车;		CartInfoHelp.getInstance().clearConfirmOrderId();		CartInfoHelp.getInstance().clearMyCart();		CartInfoHelp.getInstance().setPreOrder(new Order());				notifyTemplateService.sendOrderSms(order);				logger.error("submit order end");				/*** 支付宝立即支付 **/		HttpServletRequest request = RequestHolder.getRequest();		String payFlag = request.getParameter("payFlag");		if("1".equals(payFlag)){			//创建支付记录对象			Orderpay orderpay = new Orderpay();			orderpay.setOrderid(order.getId());						orderpay.setOrderSerialId(order.getSerialId());						orderpay.setPaystatus(Orderpay.orderpay_paystatus_n);			orderpay.setPayamount(Double.valueOf(order.getAmount()));			orderpay.setPaymethod(Orderpay.orderpay_paymethod_alipayescow);//			orderpay.setRemark(trade);			int orderpayID = orderpayService.insert(orderpay);			logger.error("orderpayID="+orderpayID);						order.setOrderpayID(order.getSerialId());// 订单序列号作为“平台订单编号”						//查询配送地址信息			PayInfo payInfo = createPayInfo(order,ordership);			request.getSession().setAttribute("payInfo", payInfo);			request.getSession().setAttribute("payInfo_orderId", order.getId());			return "alipayapi";		}		/** 支付宝支付 end */		/** 银联支付 begin */		if(!"0".equals(payFlag) && !"1".equals(payFlag)){						// 创建银联支付对象			UnionPay up = new UnionPay();			up.setOrderid(order.getId());			up.setOrderSerialId(order.getSerialId());			up.setPaystatus(UnionPay.UNIONPAY_PAYSTATUS_N);			up.setPayamount(Double.valueOf(order.getAmount()));			up.setRemark(UnionPayAction.getMerId(payFlag));						int unionPayId = unionPayService.insert(up);// 保存支付信息			logger.error("unionPayId = " + unionPayId);						request.getSession().setAttribute("payFlag", payFlag);			request.getSession().setAttribute("orderId", order.getSerialId());			request.getSession().setAttribute("amount", order.getAmount());			return  "redirect:/unionPay/signNSend";		}		/** 银联支付 end */		return  "redirect:/order/"+order.getId();//orderDetail(e.getId(), model);	}	/**	 * 创建订单，并跳转到支付页面让用户进行支付	 * 	 * @return	 * @throws Exception	 */	private String insertOrder(Order e, ModelMap model) throws Exception {//		if(!TokenUtil.getInstance().isTokenValid(getRequest())){//			throw new Exception("表单重复提交了！");//		}		logger.error("==productIDs="+e.getProductIDs()+",buyCounts="+e.getBuyCounts());				Account acc = getLoginAccount();		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return page_toLoginRedirect;		}		//从session中获取用户购买的商品列表		CartInfo cartInfo = CartInfoHelp.getInstance().getMyCart();		if (cartInfo == null || cartInfo.getProductList().size() == 0) {			logger.error("购物车中没有可支付的商品!");			model.addAttribute("msg", "购物车中没有可支付的商品!");			return "redirect:/cart/cart.html";		}				//勾选的产品和数量;		List<String> productIds = e.getProductIDs();		List<Integer> buyCounts = e.getBuyCounts();		//检测商品是否都有库存,如果没有库存需要提醒用户//		synchronized (SystemManager.product_stock_lock) {				/****************************************2015.12.8****************************************/				String guestId = RequestHolder.getRequest().getParameter("guestId");// 客户id		boolean isAccType1 = false; //1 企业账户		boolean isExpressFee = false;		boolean isActiveCodeUser = false;		Map<String,Map<String,String>> guestAccPrices=null;		//创建订单对象		Order order = new Order();		// 如果是“代客下单”，将订单中的会员id账号设置为“客”的id账号		if(StrUtils.isNotEmpty(guestId)){			order.setSysAccount(acc.getAccount());			order.setSysAccountId(acc.getId());			order.setIsSysOrder("1");						Account guest = accountService.selectById(guestId);			RequestHolder.getSession().setAttribute("guest", guest);						order.setAccount(guest.getAccount());			order.setAccountId(guestId);			order.setAccountCode(guest.getAccountCode());			order.setSettlementCode(guest.getPaymentType());//结算方式;						order.setExpressType(guest.getExpressType());//物流类型			order.setIsServiceFee(guest.getIsServiceFee());			order.setIsOtherFee(guest.getIsOtherFee());			order.setCommisionUser(guest.getSaleCode());			order.setAccType(guest.getAccType());			order.setPayType(guest.getPaymentType());			order.setTrueName(guest.getTrueName());			if(("1").equals(guest.getExpressType())){				order.setExpressCode(guest.getExpressCode());//物流代码				order.setExpressCompanyName(guest.getExpressOther());//物流公司				isExpressFee = true;			}			if("1".equals(guest.getAccType())){				isAccType1 = true;				order.setRebate(Double.parseDouble(guest.getDiscount()));			}else{				order.setExpressType("1");//物流类型			}			if("1".equals(guest.getActiveCode())){				isActiveCodeUser = true;			}			if("1".equals(order.getIsServiceFee())){ //确定有服务费：设置发票抬头				order.setIsBill("1");//是否勾选发票				order.setIncoiceTitle(guest.getBankAccountName());//发票抬头 			}else{				order.setIsBill("0");			}			guestAccPrices = ProductUtil.getAccPrices(guest, false);					}else{// 如果不是“代客下单”，则是当前登录人的信息			order.setIsSysOrder("0");			order.setAccount(acc.getAccount());			order.setAccountId(acc.getId());			order.setAccountCode(acc.getAccountCode());			order.setSettlementCode(acc.getPaymentType());//结算方式;						order.setExpressType(acc.getExpressType());//物流类型			order.setIsServiceFee(acc.getIsServiceFee());			order.setIsOtherFee(acc.getIsOtherFee());			order.setCommisionUser(acc.getSaleCode());			order.setAccType(acc.getAccType());			order.setPayType(acc.getPaymentType());			order.setTrueName(acc.getTrueName());			if(("1").equals(acc.getExpressType())){				order.setExpressCode(acc.getExpressCode());//物流单号				order.setExpressCompanyName(acc.getExpressOther());//物流公司				isExpressFee = true;			}			if("1".equals(acc.getAccType())){				isAccType1 = true;				order.setRebate(Double.parseDouble(acc.getDiscount()));			}else{				order.setExpressType("1");//物流类型			}						if("1".equals(acc.getActiveCode())){				isActiveCodeUser = true;			}			if("1".equals(order.getIsServiceFee())){ //确定有服务费：设置发票抬头				order.setIsBill("1");//是否勾选发票				order.setIncoiceTitle(acc.getBankAccountName());//发票抬头 //TODO			}else{				order.setIsBill("0");			}		}				order.setStatus(Order.order_status_temp);		order.setPaystatus(Order.order_paystatus_n);		order.setConfirmStatus(Order.order_confirmStatus_n);		order.setOtherRequirement(e.getOtherRequirement());//附加要求				//商品总金额//		double ptotal = 0d;		//int score = 0;//订单积分 等于订单项中每个商品赠送的积分总和		//创建订单明细集合		Map<String,String> plines = SystemManager.getInstance().getSystemDicts("account_purchaseType");				List<Ordermain> ordermainList = new LinkedList<Ordermain>();		List<Orderdetail> orderdetailList = new LinkedList<Orderdetail>();		//产品线;		Map<String,String> plineMap = SystemManager.getInstance().getSystemDicts("account_purchaseType");		//Integer _num_fix = 0;		//double _amount_fix = 0;		double _amount = 0;		double ptotal = 0;		double discountFee = 0;		int _number = 0;		int _quantity = 0;		Iterator<Product> iter = cartInfo.getProductList().iterator();  		while(iter.hasNext()){  			Product product = iter.next();			if(StrUtils.isNotEmpty(guestId)){				ProductUtil.setPrice(product,guestAccPrices);//重新设置价格;			}						for(int i=0;i<productIds.size();i++){				if(productIds.get(i).equals(product.getId())){					Ordermain ordermain = new Ordermain();					Orderdetail orderdetail = new Orderdetail();										orderdetail.setProductID(Integer.valueOf(product.getId()));					orderdetail.setGiftID(product.getGiftID());//商品赠品ID										orderdetail.setPrice(isAccType1 ? product.getNowPrice() : product.getPrice());//商品现价										orderdetail.setNumber(buyCounts.get(i));//购买数 //product.getBuyCount()					//orderdetail.setProductName(product.getName());					orderdetail.setProductName(product.getTitle());					orderdetail.setTotal0(df.format(Double.valueOf(orderdetail.getPrice()) * orderdetail.getNumber()));//订单项小计					if("gh".equals(product.getPline())){//特例:激活码不在折扣方案中;						//"2万以上含2万"	2万以下						//国内	不限	¥0.25 	¥0.35 						//国际	不限	¥0.35 	¥0.65 						if(orderdetail.getNumber()>=20000){							String priceTemp = SystemManager.getInstance().getSystemDict("product_price", product.getPcode());							if(StrUtils.isNotEmpty(priceTemp)){								orderdetail.setPrice(priceTemp);								orderdetail.setTotal0(String.valueOf(Double.valueOf(orderdetail.getPrice()) * orderdetail.getNumber()));//订单项小计							}						}					}										orderdetail.setScore(product.getScore());//活的赠送的积分										orderdetail.setMainCatalogCode(product.getMainCatalogCode());					orderdetail.setMainCatalogName(product.getMainCatalogName());					orderdetail.setChildrenCatalogCode(product.getChildrenCatalogCode());					orderdetail.setChildrenCatalogName(product.getChildrenCatalogName());					orderdetail.setMaterial(product.getMaterial());					orderdetail.setPicture(product.getPicture());					if(plines.containsKey(product.getPline()))//产品线名称;						orderdetail.setPline(plines.get(product.getPline()));					else						orderdetail.setPline(product.getPline());					orderdetail.setPcode(product.getPcode());															_amount += Double.valueOf(orderdetail.getPrice()) * orderdetail.getNumber();					_number += orderdetail.getNumber();					_quantity ++;					/*if("gh".equals(product.getPline())){//特例:激活码不在折扣方案中;						_num_fix += orderdetail.getNumber();						_amount_fix += Double.valueOf(orderdetail.getPrice()) * orderdetail.getNumber();					}*/					//---------------------					boolean isExit = false;					if(ordermain ==null || !product.getPline().equals(ordermain.getMainCatalogCode())){						isExit = true;					}										isExit = false;					for(Ordermain m : ordermainList){						if(m.getMainCatalogCode().equals(product.getPline())){							ordermain = m;							isExit = true;						}					}					ordermain.setMainCatalogCode(product.getPline());					ordermain.setMainCatalogName(plineMap.get(product.getPline()));//product.getMainCatalogName()					ordermain.setNumber(ordermain.getNumber() + orderdetail.getNumber());					ordermain.setTotal0(ordermain.getTotal0() + Double.valueOf(orderdetail.getPrice()) * orderdetail.getNumber()) ;					ordermain.setSubTotal(df.format(ordermain.getTotal0()));					ordermain.setCount(ordermain.getCount()+1);										//不存在添加;					if(!isExit){						ordermainList.add(ordermain);					}					orderdetailList.add(orderdetail);										//不清空购物车;;在确认下单的时候清空;//					iter.remove();										break;				}			}		}				if(StrUtils.isNotEmpty(orderdetailList)){			if(orderdetailList.size()==1){				order.setRemark(orderdetailList.get(0).getProductName());			}else{				order.setRemark("合并|"+orderdetailList.size()+"笔订单");			}						ptotal = _amount;						double expressFee = 0;			order.setExpressFee("0");			/* @20160107 del 次逻辑			 * //企业账户    货到付款减去计算的物流费			if(isAccType1 && isExpressFee){//到付的客户 根据产品线结算包邮的物流费				Map<String,String> plineFee = SystemManager.getInstance().getSystemDict_ext("account_purchaseType");				for(Ordermain ordermains : ordermainList){					if(plineFee.containsKey(ordermains.getMainCatalogCode())){						if(StrUtils.isNotEmpty(plineFee.get(ordermains.getMainCatalogCode()))){							try{								double pFee = Double.valueOf(plineFee.get(ordermains.getMainCatalogCode()));								expressFee += ordermains.getNumber() * pFee;							}catch(Exception ee){								logger.error(" pline:{} expressFee is null",ordermains.getMainCatalogCode());							}						}					}				}				order.setExpressFee(df.format(expressFee));			}*/			//折后金额			double rebateAmount = _amount = _amount - expressFee; //产品总价-物流费;									if(_number>0 ){								//优惠额度;			 if(order.getRebate()>0){				discountFee = _amount*0;//_amount*(order.getRebate())*0.01;				rebateAmount = _amount = _amount-discountFee ;				logger.info("order new amount:{}",_amount);			 }			}									double fee = 0;			if("1".equals(order.getIsServiceFee())){ //确定有服务费：设置发票抬头				fee = _amount * 0.1;				order.setFee(df.format(fee));			}				//订单总金额 = 折后金额+服务费;			_amount = rebateAmount + fee;									/************************************预计发货日期计算************************************/			int s_count1=0;//单个最大数			int t_count1=0;//总数量			int s_count2=0;			int t_count2=0;			for(Ordermain ordermains : ordermainList){//订单主表//裸膜发货需要的时间B100A1 B100A2   type=0		      for(Orderdetail o : orderdetailList){//订单表//List<Orderdetail> orderdetailList		    	  if(ordermains.getMainCatalogName().equals(o.getPline())){//如果产品线相同		    		  if(("B100A1").equals(ordermains.getMainCatalogCode()) || ("B100A2").equals(ordermains.getMainCatalogCode())){		  			    t_count1+=o.getNumber();//裸膜的总数量		  			    		  				if(s_count1==0){		  					s_count1=o.getNumber();		  				}else{		  					  if(s_count1<=o.getNumber()){		  						  s_count1=o.getNumber();		  					  }		  				}		  						  			}else{//精装或简装需要的发货时间		  			   t_count2+=o.getNumber();//精装或简装的总数量		  			   if(s_count2==0){		  					s_count2=o.getNumber();		  				}else{		  					if(s_count2<=o.getNumber()){		  						  s_count2=o.getNumber();		  					  }		  				}		  			}		    		  		    	  }		      }		      			}						int expectDay = -1;						if(isActiveCodeUser){ //激活码用户发货日期默认2天				expectDay = 2;			}else{				if(t_count1>30000 || t_count2 >30000 || s_count2 >30000 || s_count1 >30000){//订单数量大于30000或 单个产品数量大于30000   取最大值15					logger.info(">30000");					expectDay = 15;				}else{//正常范围值内							if(t_count1!=0 && t_count2==0){						MakeTime makeTime=new MakeTime();						makeTime.setType("0");						makeTime.setS_count(s_count1);						makeTime.setT_count(t_count1);						MakeTime mk=makeTimeService.SelectDays((net.jeeshop.services.front.make_time.bean.MakeTime) makeTime); 						logger.info(mk.getDays()+"裸膜 发货天数 "+makeTime.getS_count()+"单个产品最大订单数"+makeTime.getT_count()+"订单总数量");						expectDay = mk.getDays();					}					if(t_count1==0 && t_count2!=0){						MakeTime makeTime=new MakeTime();						makeTime.setType("1");						makeTime.setS_count(s_count2);						makeTime.setT_count(t_count2);						MakeTime mk=makeTimeService.SelectDays((net.jeeshop.services.front.make_time.bean.MakeTime) makeTime); 						logger.info(mk.getDays()+"精装或简装 发货天数 "+makeTime.getS_count()+"单个产品最大订单数"+makeTime.getT_count()+"订单总数量");						expectDay = mk.getDays();					}			        if(t_count1!=0 && t_count2!=0){			        	MakeTime makeTime=new MakeTime();						makeTime.setType("0");						makeTime.setS_count(s_count1);						makeTime.setT_count(t_count1);						MakeTime mk=makeTimeService.SelectDays((net.jeeshop.services.front.make_time.bean.MakeTime) makeTime); 						logger.info(mk.getDays()+"裸膜 发货天数 "+makeTime.getS_count()+"单个产品最大订单数"+makeTime.getT_count()+"订单总数量");						MakeTime makeTime1=new MakeTime();						makeTime1.setType("1");						makeTime1.setS_count(s_count2);						makeTime1.setT_count(t_count2);						MakeTime mk1=makeTimeService.SelectDays((net.jeeshop.services.front.make_time.bean.MakeTime) makeTime1); 						logger.info(mk1.getDays()+"精装或简装 发货天数 "+makeTime1.getS_count()+"单个产品最大订单数"+makeTime1.getT_count()+"订单总数量");						expectDay =(mk.getDays()>=mk1.getDays())?(mk.getDays()):(mk1.getDays());						logger.info(expectDay+"实际发货天数");					}								}			}						if(expectDay!=-1){				String expectDateTemp=null;				if(isAccType1){//企业用户					expectDateTemp = DateTimeUtil.dateAdd("d", expectDay , new java.util.Date(), "yyyy-MM-dd");					logger.info("实际发货天数：{}, 日期：{}",expectDay,expectDateTemp);				}else{//个人用户  2天					expectDateTemp = DateTimeUtil.dateAdd("d", 2 , new java.util.Date(), "yyyy-MM-dd");					logger.info("实际发货天数：{}, 日期：{}",2,expectDateTemp);				}				order.setExpectSignDate(expectDateTemp);			}						/*************************************************************************************************************/												order.setQuantity(_quantity);			order.setNumber(_number);			order.setPtotal(df.format(ptotal));//订单商品总金额			order.setRebateAmount(df.format(rebateAmount));//折后金额			order.setAmount(df.format(_amount));//总金额			order.setDiscountFee(df.format(discountFee));//优惠额度						order.setOrdermainList(ordermainList);//			String confirmId = CartInfoHelp.getInstance().getConfirmOrderId();			if(StrUtils.isNotEmpty(confirmId)){				//				logger.error("confirmId {}",confirmId);				order.setId(confirmId);			}			// 将待确认的订单信息存入缓存			order.setOrderdetail(orderdetailList);			//ordermainList			CartInfoHelp.getInstance().setPreOrder(order);						//清空购物车			//cartInfo.clear();			cartInfo.totalCacl();			CartInfoHelp.getInstance().setMyCart(cartInfo);						return "redirect:/order/confirmOrder";		}else{			logger.error("cart not find chose product");			model.addAttribute("msg", "请勾选要下单的商品!");			return "/cart/cart.html";		}	}	/*		 * 创建订单，并跳转到支付页面让用户进行支付	 * 	 * @return	 * @throws Exception	 *	private String insertAndPay(Order e, ModelMap model) throws Exception {//		if(!TokenUtil.getInstance().isTokenValid(getRequest())){//			throw new Exception("表单重复提交了！");//		}				logger.error("==insertAndPay=="+e.getSelectAddressID()+",expressCode = "+e.getExpressCode()+",otherRequirement = " + e.getOtherRequirement());		Account acc = getLoginAccount();		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return page_toLoginRedirect;		}				if(StringUtils.isBlank(e.getSelectAddressID()) || StringUtils.isBlank(e.getExpressCode())){			throw new NullPointerException("非法请求！");		}		//从session中获取用户购买的商品列表		CartInfo cartInfo = CartInfoHelp.getInstance().getMyCart();		if (cartInfo == null || cartInfo.getProductList().size() == 0) {			throw new NullPointerException("购物车中没有可支付的商品!");		}				//检测商品是否都有库存,如果没有库存需要提醒用户//		synchronized (SystemManager.product_stock_lock) {        Map<String, ProductStockInfo> productStockMap = SystemManager.getInstance().getProductStockMap();			boolean no = false;			for (int i = 0; i < cartInfo.getProductList().size(); i++) {				Product product = cartInfo.getProductList().get(i);                if(productStockMap.get(product.getId())==null){					product.product_sorry_str = "抱歉，该商品目前库存不足！";					no = true;					continue;				}								ProductStockInfo stockInfo = productStockMap.get(product.getId());				if(product.getBuyCount() > stockInfo.getStock()){					//如果用户购买的某个商品的数量大于该商品的库存数，则提示					product.product_sorry_str = "抱歉，该商品目前库存不足！";					no = true;				}			}						//库存不足，则刷最后支付页面，提示用户某些商品的库存不足，请重新选购			if(no){				logger.error("某些商品库存不足！请重新选购！");				return "redirect:/order/confirmOrder.html";			}			//			if(!no){//				//如果检查没有出现库存不足的情况，则进行砍库存操作//				for (int i = 0; i < cartInfo.getProductList().size(); i++) {//					Product product = cartInfo.getProductList().get(i);//					ProductStockInfo stockInfo = SystemManager.productStockMap.get(product.getId());//					stockInfo.setStock(stockInfo.getStock() - product.getBuyCount());//					stockInfo.setChangeStock(true);//					SystemManager.productStockMap.put(product.getId(),stockInfo);//				}//			}//		}				//获取配送方式		Express express = SystemManager.getInstance().getExpressMap().get(e.getExpressCode());		if(express==null){			throw new NullPointerException("没有编码为"+e.getExpressCode()+"的配送方式！本次请求视为非法！");		}				//创建订单对象		Order order = new Order();		order.setAccount(acc.getAccount());		order.setAccountId(acc.getId());		order.setQuantity(cartInfo.getProductList().size());		order.setRebate(1);		order.setStatus(Order.order_status_init);		order.setPaystatus(Order.order_paystatus_n);		order.setOtherRequirement(e.getOtherRequirement());//附加要求				//商品总金额//		double ptotal = 0d;		int score = 0;//订单积分 等于订单项中每个商品赠送的积分总和		//创建订单明细集合		List<Orderdetail> orderdetailList = new LinkedList<Orderdetail>();		for (int i = 0; i < cartInfo.getProductList().size(); i++) {			Product product = cartInfo.getProductList().get(i);			//			ProductStockInfo momeryProduct = SystemManager.productStockMap.get(product.getId());//			if(StringUtils.isNotBlank(momeryProduct.getActivityID())){//				Activity activity = SystemManager.activityMap.get(momeryProduct.getActivityID());//				String discountType = activity.getDiscountType();//				if(discountType.equals(Activity.activity_discountType_r)){//					////					double finalPrice = Double.valueOf(product.getNowPrice()) - Double.valueOf(activity.getDiscount());//					//				}else if(discountType.equals(Activity.activity_discountType_d)){//					//				}//			}						Orderdetail orderdetail = new Orderdetail();			orderdetail.setProductID(Integer.valueOf(product.getId()));			orderdetail.setGiftID(product.getGiftID());//商品赠品ID			orderdetail.setPrice(product.getNowPrice());//商品现价			orderdetail.setNumber(product.getBuyCount());//购买数			orderdetail.setFee("0");//配送费			orderdetail.setProductName(product.getName());			orderdetail.setTotal0(String.valueOf(Double.valueOf(orderdetail.getPrice()) * orderdetail.getNumber()));//订单项小计			orderdetail.setScore(product.getScore());//活的赠送的积分			if(product.getBuySpecInfo()!=null){				//按照规格计算				orderdetail.setSpecInfo("尺寸:"+product.getBuySpecInfo().getSpecSize()+",颜色:"+product.getBuySpecInfo().getSpecColor());//				ptotal+= Double.valueOf(product.getBuySpecInfo().getSpecPrice()) * product.getBuyCount();//				score+= product.getScore();			}else{			}//			ptotal+= Double.valueOf(product.getNowPrice()) * product.getBuyCount();			score+= product.getScore();			orderdetailList.add(orderdetail);		}		if(orderdetailList.size()==1){			order.setRemark(orderdetailList.get(0).getProductName());		}else{			order.setRemark("合并|"+orderdetailList.size()+"笔订单");		}				order.setScore(score);		order.setExpressCode(express.getCode());//配送方式编码		order.setExpressName(express.getName());//配送方式名称		order.setFee(String.valueOf(express.getFee()));//订单配送费		order.setPtotal(cartInfo.getAmount());//订单商品总金额		order.setAmount(String.valueOf(Double.valueOf(cartInfo.getAmount())+Double.valueOf(order.getFee())));//订单总金额 = 内存订单总金额 + 总配送费		order.setAmountExchangeScore(cartInfo.getTotalExchangeScore());//订单总兑换积分。订单支付成功以后扣除						 * 对金额进行格式化，防止出现double型数字计算造成的益出。				logger.error("order.getAmount()="+order.getAmount());		order.setAmount(df.format(Double.valueOf(order.getAmount())));//订单总金额		order.setPtotal(df.format(Double.valueOf(order.getPtotal())));//订单商品总金额		order.setFee(df.format(Double.valueOf(order.getFee())));//订单总配送费						 * 配送地址信息		 		Ordership ordership = new Ordership();		ordership.setOrderid(order.getId());				Address address = addressService.selectById(e.getSelectAddressID());		if(address==null){			throw new NullPointerException("根据ID="+e.getSelectAddressID()+"查询不到配送地址信息！本次请求视为非法！");		}		logger.error(address.toString());				Area area = SystemManager.getInstance().getAreaMap().get(address.getProvince());//获取省份对象		String proinceName = area.getName();//省份名称		String cityName = null;//城市名称		String areaName = null;		List<Area> citys = area.getChildren();		if(citys!=null && citys.size()>0){			for(int i=0;i<citys.size();i++){				Area cityItem = citys.get(i);				if(cityItem.getCode().equals(address.getCity())){					cityName = cityItem.getName();										//获取所在区域名称					if(StringUtils.isNotBlank(address.getArea())){						List<Area> areaList = cityItem.getChildren();						if(areaList!=null && areaList.size()>0){							for(int m=0;m<areaList.size();m++){								areaName = areaList.get(m).getName();							}						}					}				}			}		}		ordership.setShipname(address.getName());		ordership.setShipaddress(proinceName+cityName+address.getAddress());		ordership.setProvinceCode(address.getProvince());		ordership.setProvince(proinceName);		ordership.setCityCode(address.getCity());		ordership.setCity(cityName);		ordership.setAreaCode(address.getArea());		ordership.setArea(areaName);		ordership.setPhone(address.getPhone());		ordership.setTel(address.getMobile());		ordership.setZip(address.getZip());		ordership.setSex("1");		logger.error(ordership.toString());				//创建订单并插入到数据库		orderService.createOrder(order, orderdetailList,ordership);				PayInfo payInfo = createPayInfo(order,ordership);				//清空购物车		cartInfo.clear();		//cartInfo = null;		CartInfoHelp.getInstance().setMyCart(cartInfo);				//更新内存中的订单缓存数据//		if(SystemManager.ordersReport!=null){//			SystemManager.ordersReport.setNotPayCount(SystemManager.ordersReport.getNotPayCount()+1);//订单++////			SystemManager.ordersReport.getNotPayCount().incrementAndGet();//订单++//		}		RequestHolder.getRequest().setAttribute("payInfo", payInfo);		return "alipayapi";	}*/			/**	 * 点击我的订单页面的未付款的订单进行付款操作,则跳转到付款页面进行付款	 * @return	 */	@RequestMapping("toPay")	public String toPay(HttpServletRequest request){		if (getLoginAccount() == null) {			return page_toLogin;		}		String orderid = RequestHolder.getRequest().getParameter("id");		logger.error("orderid="+orderid);		if(StringUtils.isBlank(orderid)){			logger.error("toPay--->获取订单id失败！");			throw new NullPointerException();		}				Order order = orderService.selectById(orderid);		if(order==null){			logger.error("toPay--->根据订单号查询不到订单信息！----> "+orderid);			throw new NullPointerException("根据订单号查询不到订单信息！");		}				Ordership ordership = ordershipService.selectOne(new Ordership(orderid));		if(ordership==null){			logger.error("toPay--->根据订单号查询不到配送信息！----> "+orderid);			throw new NullPointerException("根据订单号查询不到配送信息！");		}				String payWay = request.getParameter("payWay");				if("1".equals(payWay)){// 支付宝						PayInfo payInfo = this.aliPayInfo(order, ordership);			request.getSession().setAttribute("payInfo", payInfo);			request.getSession().setAttribute("payInfo_orderId", order.getId());			return "alipayapi";					} else {// 银联						UnionPay exist = unionPayService.selectByOrderId(order.getId());			if(StrUtils.isEmpty(exist)){				// 创建银联支付对象				UnionPay up = new UnionPay();				up.setOrderid(order.getId());				up.setOrderSerialId(order.getSerialId());				up.setPaystatus(UnionPay.UNIONPAY_PAYSTATUS_N);				up.setPayamount(Double.valueOf(order.getAmount()));				up.setRemark(UnionPayAction.getMerId(payWay));				unionPayService.insert(up);// 保存支付信息			}						request.getSession().setAttribute("payFlag", payWay);			request.getSession().setAttribute("orderId", order.getSerialId());			request.getSession().setAttribute("amount", order.getAmount());						return "redirect:/unionPay/signNSend";		}	}		/**	 * 创建支付宝订单支付信息	 * @param order 订单	 * @param ordership 物流	 * @return	 */	private PayInfo aliPayInfo(Order order, Ordership ordership) {		Orderpay existPay = orderpayService.selectByOrderSid(order.getSerialId());		if(StrUtils.isEmpty(existPay)){//			trade = "ZD"+ApDateTime.getNowDateTime("yyyyMMddHHmmssSSS") + RandNumber.getRandNumber(6);			//创建支付记录对象			Orderpay orderpay = new Orderpay();			orderpay.setOrderid(order.getId());			orderpay.setOrderSerialId(order.getSerialId());			orderpay.setPaystatus(Orderpay.orderpay_paystatus_n);			orderpay.setPayamount(Double.valueOf(order.getAmount()));			orderpay.setPaymethod(Orderpay.orderpay_paymethod_alipayescow);			orderpayService.insert(orderpay);		}		order.setOrderpayID(order.getSerialId());				//查询配送地址信息		PayInfo payInfo = createPayInfo(order,ordership);		return payInfo;	}		/**	 * 用户进行评论提交	 * @return	 * @throws Exception 	 */	@RequestMapping(value = "doRate", method = RequestMethod.POST)	public String doRate() throws Exception{		Account acc = getLoginAccount();		if (acc == null) {			return page_toLogin;		}		logger.error("doRate...");				int orderid = Integer.valueOf(RequestHolder.getRequest().getParameter("orderid").toString());		Order order = orderService.selectById(String.valueOf(orderid));		if (StringUtils.isNotBlank(order.getClosedComment())				&& order.getClosedComment().equals(Order.order_closedComment_y)) {			//订单的点评功能已被关闭。			throw new RuntimeException(FrontContainer.request_illegal_error);		}				/*		 * 用户可以对每个订单项对应的商品进行评价		 */		Orderdetail orderdetail = new Orderdetail();		orderdetail.setOrderID(orderid);		List<Orderdetail> list = orderdetailService.selectList(orderdetail);		List<Comment> comments = new LinkedList<Comment>();		for(int i=0;i<list.size();i++){			Orderdetail item = list.get(i);			//获取页面上填写的评论类容			String content = RequestHolder.getRequest().getParameter("product_"+item.getProductID());			if(StringUtils.isBlank(content)){				continue;			}			Comment c = new Comment();			c.setProductID(String.valueOf(item.getProductID()));			c.setOrderdetailID(item.getId());			c.setOrderID(String.valueOf(orderid));			c.setContent(content);			c.setStatus(Comment.comment_status_y);			c.setNickname(acc.getNickname());			c.setStar(5);			c.setAccount(acc.getAccount());			comments.add(c);		}		commentService.insertList(comments);		return ("redirect:rateSuccess");	}	@RequestMapping("rateSuccess")	public String rateSuccess(){		logger.error("rateSuccess...");		return "/rateSuccess";	}		/**	 * 支付成功后进行评价,转到评论页面	 * @return	 * @throws Exception 	 */	@RequestMapping("rate")	public String rate(@ModelAttribute("e")Order e, ModelMap model) throws Exception{		Account acc = getLoginAccount();		if (acc == null) {			return page_toLogin;		}//		String productID = getRequest().getParameter("productID");		String orderid = RequestHolder.getRequest().getParameter("orderid");		if(StringUtils.isBlank(orderid)){			throw new NullPointerException("参数异常！");		}				/*		 * 用户可以对每个订单项对应的商品进行评价		 */		Orderdetail orderdetail = new Orderdetail();		orderdetail.setOrderID(Integer.valueOf(orderid));		orderdetail.setIsComment(Orderdetail.orderdetail_isComment_n);		e.setRateOrderdetailList(orderdetailService.selectList(orderdetail));		e.setId(orderid);		if(e.getRateOrderdetailList()!=null && e.getRateOrderdetailList().size()==0){			e.setRateOrderdetailList(null);		}				//加载商品信息//		product = productService.selectById(productID);//		//加载以往用户的评价信息//		comment.clear();//		comment.setAccount(acc.getAccount());//		comment.setProductID(Integer.valueOf(productID));//		comment.setOrderID(Integer.valueOf(orderid));//		comment = commentService.selectOne(comment);//		if(comment==null){//			logger.error("还没有评价");//		}else{//			logger.error("已经评价过了");//		}				//加载指定商品的评论列表//		Comment commentParam = new Comment();//		commentParam.setProductID(Integer.valueOf(productID));//		selectCommentList(commentParam);		model.addAttribute("e", e);		return "/rate";	}		/**	 * 分页加载评论	 * @return	 * @throws Exception	 */	private PagerModel selectCommentList(Comment commentParam) throws Exception {		HttpServletRequest request = RequestHolder.getRequest();		int offset = 0;		if (request.getParameter("pager.offset") != null) {			offset = Integer					.parseInt(request.getParameter("pager.offset"));		}		if (offset < 0)			offset = 0;//		Comment comment = new Comment();		((PagerModel) commentParam).setOffset(offset);		PagerModel pager = commentService.selectPageList(commentParam);		if(pager==null)pager = new PagerModel();		// 计算总页数		pager.setPagerSize((pager.getTotal() + pager.getPageSize() - 1)				/ pager.getPageSize());		//		selectListAfter();		pager.setPagerUrl("rate");		return pager;	}		DecimalFormat df = new DecimalFormat("0.00");	/**	 * 创建支付宝的付款信息对象	 * @param order	 */	private PayInfo createPayInfo(Order order,Ordership ordership) {		if(order==null || ordership==null){			throw new NullPointerException("参数不能为空！请求非法！");		}				PayInfo payInfo = new PayInfo();		payInfo.setWIDseller_email(ordership.getPhone());//		String debug = SystemManager.getInstance().get("system_debug");		String www = SystemManager.getInstance().getSystemSetting().getWww();		/**		 * 解决由于本地和线上正式环境提交相同的商户订单号导致支付宝出现TRADE_DATA_MATCH_ERROR错误的问题。		 * 本地提交的商户订单号前缀是test开头，正式环境提交的就是纯粹的支付订单号		 */		if(www.startsWith("http://127.0.0.1") || www.startsWith("http://localhost")){			payInfo.setWIDout_trade_no("test" + order.getOrderpayID());		}else{			payInfo.setWIDout_trade_no(order.getOrderpayID());		}		payInfo.setWIDsubject(order.getProductName());				payInfo.setWIDprice(Double.valueOf(order.getAmount()));		payInfo.setWIDbody(order.getOtherRequirement()==null?order.getSerialId():order.getOtherRequirement());		//		payInfo.setShow_url(SystemManager.systemSetting.getWww()+"/product/"+payInfo.getWIDout_trade_no()+".html");		payInfo.setShow_url("/order/"+order.getId());		payInfo.setWIDreceive_name(ordership.getShipname());		payInfo.setWIDreceive_address(ordership.getShipaddress());		payInfo.setWIDreceive_zip(ordership.getZip());		payInfo.setWIDreceive_phone(ordership.getTel());		payInfo.setWIDreceive_mobile(ordership.getPhone());		payInfo.setWIDsubject("指电平台订单："+order.getSerialId());//order.getRemark()				payInfo.setLogistics_fee(Double.valueOf(StrUtils.isEmpty(order.getFee())?"0":order.getFee()));		payInfo.setLogistics_type(order.getExpressCode());				logger.error(payInfo.toString());		return payInfo;	}		/**	 * 查询我的订单列表信息	 */	@RequestMapping("selectList")	public String selectList(HttpServletRequest request, @ModelAttribute("e") Order e, ModelMap model) throws Exception {		int offset = 0;//分页偏移量		if (request.getParameter("pager.offset") != null) {			offset = Integer					.parseInt(request.getParameter("pager.offset"));		}		if (offset < 0)			offset = 0;		e.setOffset(offset);		PagerModel pager = getService().selectPageList(e);		if (pager == null) {			pager = new PagerModel();		}		// 计算总页数		pager.setPagerSize((pager.getTotal() + pager.getPageSize() - 1)				/ pager.getPageSize());		pager.setPagerUrl("myCarts");		model.addAttribute("pager", pager);		return "/account/orders";	}	/**	 * 删除我的订单信息	 */	@RequestMapping("deletes")	public String deletes(String[] ids, HttpServletRequest request, @ModelAttribute("e") Order e, ModelMap model) throws Exception {		getService().deletes(ids);		return selectList(request, e, model);	}		/**	 * 退订或取消指定的订单	 * @return //取消订单;直接删除;	 * @throws Exception	 */	@RequestMapping("cancel")	public String cancel(String id) throws Exception {		Account acc = getLoginAccount();		if (acc == null) {			return page_toLogin;		}		logger.error("orderInfo.cancel...id:{}",id);				if(StrUtils.isNotEmpty(id)){//确保只能删除自己的订单;			Order order = new Order();			//order.setAccount(acc.getAccount());			order.setAccountId(acc.getId());			order.setId(id);			Order o = this.getService().selectOne(order);			//只有带提交的订单才能删除;			if(null != o && o.getStatus().equals(Order.order_status_temp)){				this.getService().deleteOrder(id);				logger.error("账号 {} ,删除订单 :{}",acc.getAccount(), id);				//请里ID				CartInfoHelp.getInstance().clearConfirmOrderId();			}		}		/*		if(StringUtils.isBlank(id)){			throw new NullPointerException("订单ID不能为空！");		}				//只有 待确认状态 、确认状态  才能取消订单		if(o.getStatus().equals(Order.order_status_temp) || o.getStatus().equals(Order.order_status_init)){			order.setStatus(Order.order_status_cancel);			this.getService().update(order);						Orderlog orderlog = new Orderlog();			orderlog.setOrderid(order.getId());//订单ID			orderlog.setAccount(order.getAccount());//操作人账号			orderlog.setContent("【取消订单】用户取消订单(于状态"+o.getStatus()+"时 执行的此操作)。");//日志内容			orderlog.setAccountType(Orderlog.orderlog_accountType_w);			orderlogService.insert(orderlog);		}else{			logger.error("订单【{}】当前状态是 {},不需要执行此操作.",o.getId(),o.getStatus());		}*/		//		return "redirect:/account/orders";	}		/**	 * 签收订单	 * @return	 * @throws Exception	 */	@RequestMapping("sign")	public String sign(String id) throws Exception {		Account acc = getLoginAccount();		if (acc == null) {			return page_toLogin;		}		logger.error("orderInfo.sign...id:{}",id);		if(StringUtils.isBlank(id)){			throw new NullPointerException("订单ID不能为空！");		}				Order order = new Order();		//order.setAccount(acc.getAccount());		order.setAccountId(acc.getId());		order.setId(id);		Order o = this.getService().selectOne(order);		if(null == o){			throw new NullPointerException("订单["+id+"]未找到");		}		//只有发货状态才需要签收；避免重复签收		if(o.getStatus().equals(Order.order_status_send)){			order.setStatus(Order.order_status_sign);			this.getService().update(order);						Orderlog orderlog = new Orderlog();			orderlog.setOrderid(order.getId());//订单ID			orderlog.setAccount(acc.getAccount());//操作人账号			orderlog.setAccountId(acc.getId());				orderlog.setContent("【签收订单】用户签收订单。");//日志内容			orderlog.setAccountType(Orderlog.orderlog_accountType_w);			orderlogService.insert(orderlog);		}else{			logger.error("订单【{}】当前状态是 {},不需要执行此操作.",o.getId(),o.getStatus());		}		//		return "redirect:/order/"+order.getId();	}		/**	 * 读取指定订单的信息	 * @return	 */	@RequestMapping("read")	public String read(){				return "";	}		/**	 * 对指定的订单进行支付	 * @return	 *///	public String doPay(){//		if(1==1){//			throw new NullPointerException();//		}//		//		String orderID = getRequest().getParameter("orderID");//		e.clear();//		e.setId(orderID);//		e.setStatus(Order.order_status_init);//等待付款//		logger.error("orderid=" + orderID);//		orderService.update(e);//		return "doPay";//	}		/**	 * 查看订单详情	 * @return	 */	@RequestMapping("{orderId}")	public String orderDetail(@PathVariable("orderId") String id, ModelMap model){		Account acc = getLoginAccount();		if (acc == null) {			return page_toLogin;		}		logger.error("orderInfo...id:{}",id);		if(StringUtils.isBlank(id)){			model.addAttribute("msg", "没有当前订单");			return "/account/orderInfo";		}				//查询订单信息		Order order = new Order();		order.setId(id);		//order.setAccount(acc.getAccount());//		order.setAccountId(acc.getId());		List<Order> orders = orderService.selectOrderInfo(order);		if(orders==null || orders.size()==0){			//throw new NullPointerException("根据订单ID查询不到订单信息！");			model.addAttribute("msg", "没有当前订单");			return "/account/orderInfo";		}		logger.error("orders.size="+orders.size());		Order e = orders.get(0);		if(e.getStatus().equals(Order.order_status_temp)){			logger.error("订单 {} 状态已经是 {}",order.getId(),e.getStatus());			return "redirect:/order/confirmOrder/"+order.getId()+".html";//orderDetail(e.getId(), model);		}				e.setOrders(orders);				Ordermain ordermain = new Ordermain();		ordermain.setOrderID(Integer.valueOf(e.getId()));		List<Ordermain> ordermainList = ordermainService.selectList(ordermain);		e.setOrdermainList(ordermainList);				//查询订单配送信息		Ordership ordership = new Ordership();		ordership.setOrderid(id);		ordership = ordershipService.selectOne(ordership);//		if(ordership==null){//			throw new NullPointerException("根据订单ID查询不到订单配送信息！");//		}		e.setOrdership(ordership);				//查询订单物流信息		//e.setKuaid100Info(kuaidi100Helper.selectKuaidi100());		model.addAttribute("e", e);				/*String expectDateTemp = DateTimeUtil.dateAdd("d", 8, new java.util.Date(), "yyyy-MM-dd");		if(StrUtils.isEmpty(e.getExpectSignDate()) ||(StrUtils.isNotEmpty(e.getExpectSignDate()) && DateTimeUtil.compareDateTime(expectDateTemp, e.getExpectSignDate())) ){			e.setExpectSignDate(expectDateTemp);		}*/		//model.addAttribute("minDate", expectDateTemp);		model.addAttribute("rabe", e.getRebate()*10);		return "/account/orderInfo";	}		/**	 * 查看物流信息	 * @return	 */	@RequestMapping("orderhipInfo")	public String orderhipInfo(){		logger.error("orderhipInfo...");		return "/account/orderhipInfo";	}	/**	 * 确认订单信息	 * @return	 */	@RequestMapping("confirmOrder")	public String confirmOrder(ModelMap model){		logger.error("orderAction ---->confirmOrder..");		Account acc =getLoginAccount();		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return page_toLoginRedirect;		}				Order e = CartInfoHelp.getInstance().getPreOrder();		if(e==null){			return "redirect:/cart/cart.html";		}				//加载配送信息		Address address = new Address();		address.setAccountId(e.getAccountId());				/*****************************************************************************************/		List<Address> addressList = addressService.selectList(address);		if(StrUtils.isNotEmpty(addressList)){			boolean exist = false;			for(Address addItem : addressList){				if(StringUtils.isNotBlank(addItem.getIsdefault()) && addItem.getIsdefault().equals("y")){					address = addItem;					exist = true;					break;				}			}			if(!exist){				address = addressList.get(0);			}		}		model.addAttribute("address", address);				//折扣点转换中文显示		model.addAttribute("e", e);		model.addAttribute("order_amount_QY", df.format( Double.valueOf(e.getAmount()) * 1.1));//企业支付金额		//model.addAttribute("minDate", expectDateTemp);		model.addAttribute("checkModel", "confirm");		model.addAttribute("paymentType",acc.getPaymentTypeName());		//model.addAttribute("expressList", SystemManager.getInstance().getExpressMap().values());				return "confirmOrder";	}		/**	 * 支付成功后，回调请求跳转到的页面	 * @return	 */	@RequestMapping("paySuccess")	public String paySuccess(HttpServletRequest request){		logger.error("paySuccess...");		String result = (String) request.getSession().getAttribute("pay_result");		request.setAttribute("result", result);		return "paySuccess";	}		@RequestMapping("orderExport")	public String orderExport(String id, HttpServletRequest request, HttpServletResponse response) throws IOException{		Account acc = getLoginAccount();		if (acc == null) {			return page_toLogin;		}		logger.error("orderInfo...id:{}",id);		if(StringUtils.isBlank(id)){			throw new NullPointerException("订单ID不能为空！");		}				//查询订单信息		Order order = new Order();		order.setId(id);		order.setAccountId(acc.getId());		order = orderService.selectOne(order);		if(null == order){			throw new NullPointerException("订单 "+id+" 无效！");		}				//订单详情		Orderdetail orderdetail = new Orderdetail();		orderdetail.setOrderID(Integer.valueOf(id));		List<Orderdetail> orderdetailList = orderdetailService.selectList(orderdetail);		if(orderdetailList==null){			throw new NullPointerException("查询不到订单明细信息！");		}				//String [] headers = new String []{"产品线","品牌","名称","适配型号","材质","单价","数量","小计"};		String [] headers = new String []{"商品名称","单价","数量","小计"};		//Map<String,String> materials = SystemManager.getInstance().getSystemDicts("product_material");				List<List<Object>> dataList = Lists.newArrayList();		for (Orderdetail e: orderdetailList) {			List<Object> data = Lists.newArrayList();			/*data.add(e.getPline());			data.add(e.getMainCatalogName());			data.add(e.getProductName());			data.add(e.getChildrenCatalogName()); 			data.add(e.getMaterial());*/						data.add(e.getPline()+e.getMainCatalogName()+e.getChildrenCatalogName()+e.getMaterial());			data.add(Float.valueOf(e.getPrice()));			data.add(e.getNumber());			data.add(Float.valueOf(e.getTotal0()));			dataList.add(data);		}				ExportExcel ee = new ExportExcel("订单列表", headers);		for (int i = 0; i < dataList.size(); i++) {			Row row = ee.addRow();			for (int j = 0; j < dataList.get(i).size(); j++) {				ee.addCell(row, j, dataList.get(i).get(j));			}		}		Integer totalCount = order.getNumber();// 总计数量		Double total = Double.valueOf(order.getPtotal());		Double dis = Double.valueOf(order.getDiscountFee());				Double discntPrice = total - dis;// 折后金额		Double actualPay = Double.valueOf(order.getAmount());// 实付金额				Row lastRow = null;		CellRangeAddress region = null;		Sheet sheet = ee.getSheet();				XSSFCellStyle cellStyle = (XSSFCellStyle) ee.getWb().createCellStyle();   //		cellStyle.setAlignment(XSSFCellStyle.ALIGN_CENTER);				lastRow = ee.addRow();		ee.addCell(lastRow, 0, "总计数量", 2, null);		ee.addCell(lastRow, 1, totalCount, 2, null);		ee.addCell(lastRow, 2, "");		ee.addCell(lastRow, 3, "");		region = new CellRangeAddress(lastRow.getRowNum(), lastRow.getRowNum(), 1, 3);        sheet.addMergedRegion(region);         lastRow.setRowStyle(cellStyle);        		lastRow = ee.addRow();		ee.addCell(lastRow, 0, "折后金额", 2, null);		ee.addCell(lastRow, 1, discntPrice, 2, null);		ee.addCell(lastRow, 2, "");		ee.addCell(lastRow, 3, "");		region = new CellRangeAddress(lastRow.getRowNum(), lastRow.getRowNum(), 1, 3);        sheet.addMergedRegion(region);         		lastRow = ee.addRow();		ee.addCell(lastRow, 0, "实付金额", 2, null);		ee.addCell(lastRow, 1, actualPay, 2, null);		ee.addCell(lastRow, 2, "");		ee.addCell(lastRow, 3, "");		region = new CellRangeAddress(lastRow.getRowNum(), lastRow.getRowNum(), 1, 3);        sheet.addMergedRegion(region);				ee.write(response, "order_"+order.getId()+".xlsx").dispose();		return null;	}		@RequestMapping("orderExports")	public String orderExports(HttpServletRequest request, HttpServletResponse response) throws IOException{		Order o = CartInfoHelp.getInstance().getPreOrder();		Account acc = getLoginAccount();		if (acc == null) {			return page_toLogin;		}		if(null==o){			return "redirect:/cart/cart.html";		}		if(o.getOrderdetail()==null){			throw new NullPointerException("查询不到订单明细信息！");		}		String [] headers = new String []{"商品名称","单价","数量","小计"};		List<List<Object>> dataList = Lists.newArrayList();		for (Orderdetail e: o.getOrderdetail()) {			List<Object> data = Lists.newArrayList();			data.add(e.getProductName());			data.add(Float.valueOf(e.getPrice()));			data.add(e.getNumber());			data.add(Float.valueOf(e.getTotal0()));			dataList.add(data);		}		ExportExcel ee = new ExportExcel("订单列表", headers);		for (int i = 0; i < dataList.size(); i++) {			Row row = ee.addRow();			for (int j = 0; j < dataList.get(i).size(); j++) {				ee.addCell(row, j, dataList.get(i).get(j));			}		}		Integer totalCount = o.getNumber();// 总计数量		Double discntPrice = Double.valueOf(o.getRebateAmount());// 折后金额		Double actualPay = Double.valueOf(o.getAmount());// 实付金额				Row lastRow = null;		CellRangeAddress region = null;		Sheet sheet = ee.getSheet();				XSSFCellStyle cellStyle = (XSSFCellStyle) ee.getWb().createCellStyle();   //		cellStyle.setAlignment(XSSFCellStyle.ALIGN_CENTER);				lastRow = ee.addRow();		ee.addCell(lastRow, 0, "总计数量", 2, null);		ee.addCell(lastRow, 1, totalCount, 2, null);		ee.addCell(lastRow, 2, "");		ee.addCell(lastRow, 3, "");		region = new CellRangeAddress(lastRow.getRowNum(), lastRow.getRowNum(), 1, 3);        sheet.addMergedRegion(region);         lastRow.setRowStyle(cellStyle);        		lastRow = ee.addRow();		ee.addCell(lastRow, 0, "折后金额", 2, null);		ee.addCell(lastRow, 1, discntPrice, 2, null);		ee.addCell(lastRow, 2, "");		ee.addCell(lastRow, 3, "");		region = new CellRangeAddress(lastRow.getRowNum(), lastRow.getRowNum(), 1, 3);        sheet.addMergedRegion(region);         		lastRow = ee.addRow();		ee.addCell(lastRow, 0, "实付金额", 2, null);		ee.addCell(lastRow, 1, actualPay, 2, null);		ee.addCell(lastRow, 2, "");		ee.addCell(lastRow, 3, "");		region = new CellRangeAddress(lastRow.getRowNum(), lastRow.getRowNum(), 1, 3);        sheet.addMergedRegion(region);				ee.write(response, "order.xlsx").dispose();		return null;	}		/**	 * 跳转到最终确认订单的页面	 * @param model 模型	 * @param request	 * @param e 订单对象	 * @param session	 * @return	 */	@RequestMapping("/confirmOrderInfo")	public String confirmOrderInfo(ModelMap model,HttpServletRequest request,Order e,HttpSession session){		Account acc =getLoginAccount();		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return page_toLoginRedirect;		}				Order cachedOrder = CartInfoHelp.getInstance().getPreOrder();		if(null==cachedOrder){			return "redirect:/account/orders.html";		}		String selectAddressId = "";		if(StrUtils.isEmpty(e.getSelectAddressID())){			ModelMap models=(ModelMap) session.getAttribute("model");			Order modOrder=(Order) models.get("e");			cachedOrder.setOtherRequirement(modOrder.getOtherRequirement());			cachedOrder.setExpressCompanyName(modOrder.getExpressCompanyName());			cachedOrder.setExpressCode(modOrder.getExpressCode());			cachedOrder.setIsBill(modOrder.getIsBill());			cachedOrder.setIncoiceTitle(modOrder.getIncoiceTitle());			selectAddressId = modOrder.getSelectAddressID();		}else{			cachedOrder.setOtherRequirement(e.getOtherRequirement());			if(StrUtils.isNotEmpty(e.getOtherRequirement()) && StrUtils.isNotEmpty(e.getExpressCompanyName())){				cachedOrder.setExpressCompanyName(e.getExpressCompanyName());				cachedOrder.setExpressCode(e.getExpressCode());			}			selectAddressId = e.getSelectAddressID();		}		Address address = addressService.selectById(selectAddressId);		cachedOrder.setSelectAddressID(selectAddressId);				CartInfoHelp.getInstance().setPreOrder(cachedOrder);						model.addAttribute("e", cachedOrder);		model.addAttribute("address", address);		session.setAttribute("model", model);		return "/confirmOrderInfo";	}	}