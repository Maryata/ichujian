package net.jeeshop.services.manage.notifyTemplate.impl;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.annotation.Resource;import net.jeeshop.core.ServersManager;import net.jeeshop.core.sms.SMSUtil;import net.jeeshop.core.system.bean.User;import net.jeeshop.core.util.ApDateTime;import net.jeeshop.core.util.FreemarkerTemplateUtil;import net.jeeshop.core.util.StrUtils;import net.jeeshop.services.common.Order;import net.jeeshop.services.front.account.AccountService;import net.jeeshop.services.front.account.bean.Account;import net.jeeshop.services.front.ordership.OrdershipService;import net.jeeshop.services.front.ordership.bean.Ordership;import net.jeeshop.services.manage.notifyTemplate.NotifyTemplateService;import net.jeeshop.services.manage.notifyTemplate.bean.NotifyTemplate;import net.jeeshop.services.manage.notifyTemplate.dao.NotifyTemplateDao;import net.jeeshop.services.manage.sms.bean.Sms;import net.jeeshop.services.manage.sms.dao.SmsDao;import net.jeeshop.services.manage.system.impl.UserService;import net.jeeshop.web.util.LoginUserHolder;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Service("notifyTemplateServiceManage")public class NotifyTemplateServiceImpl extends		ServersManager<NotifyTemplate, NotifyTemplateDao> implements		NotifyTemplateService {	@Autowired	private UserService userService;	@Autowired	private AccountService accountService;	@Autowired	private OrdershipService ordershipService;		@Resource(name = "smsDaoManage")	private SmsDao smsDao;	@Resource(name = "notifyTemplateDaoManage")	@Override	public void setDao(NotifyTemplateDao notifyTemplateDao) {		this.dao = notifyTemplateDao;	}	/**	 * 客户发送订单信息	 * 	 * @return	 */	@Override	public void SendMessage(Account e) {		// 通过发送的状态查询短信模板		NotifyTemplate nt = new NotifyTemplate();		nt.setCode(e.getStatus());		// nt.setCode("order_status_send");		NotifyTemplate notifyTemplate = dao.selectOne(nt);		String ids = notifyTemplate.getAcceptId();		// 以逗号分割		String[] id = ids.split(",");		// 拼接手机号		List<Map<String, Object>> Lists = userService.selectIds(id);		Sms sms = new Sms();		String phones = "";		for (int i = 0; i < Lists.size(); i++) {			Map<String, Object> listMap = Lists.get(i);			phones = phones + " " + listMap.get("phone").toString() + ",";		}		sms.setPhone(phones);		// sms.setPhone(listMap.get("phone").toString());		sms.setContent(nt.getTemplate());		try {			SMSUtil.sendSMS(sms);		} catch (Exception e1) {			e1.printStackTrace();		}	}	@Override	public void sendOrderSms(Order order) {		// 根据订单状态查询发送短信模板;		// order_status_send		String orderStatus = order.getStatus();		log.info("order send sendOrderSms ID: {} ,status : {} init",order.getSerialId(),order.getStatus());				NotifyTemplate nt = new NotifyTemplate();		nt.setCode("order_status_"+order.getStatus());		NotifyTemplate notifyTemplate = dao.selectOne(nt);		if(StrUtils.isEmpty(notifyTemplate)){			log.debug("this order status {} not find template",order.getStatus());			return;		}		String ids = notifyTemplate.getAcceptId();		Sms sms = new Sms();		User user=new User();		user.setUsercode(order.getCommisionUser());		//订单提交;给助理和财务发短信和（）		if(Order.order_status_init.equals(orderStatus)){			String phones = this.getUserPhone(ids);			if(StrUtils.isNotEmpty(phones)){				if(StrUtils.isNotEmpty(order.getCommisionUser())){					User u=this.getUserPhones(user);//销售手机号					phones+=","+u.getPhone();				}				sms.setPhone(phones);				sms.setSendTime(ApDateTime.getNowDateTime(ApDateTime.DATE_TIME_Sec));				Account acc = LoginUserHolder.getLoginAccount();				Account e = accountService.selectById(acc.getId());				Map<String,String> data = new HashMap<String, String>();				data.put("orderId", order.getSerialId());//				data.put("amount", order.getAmount());				if("1".equals(order.getIsSysOrder())){					data.put("phone", order.getAccount());				}else{					data.put("phone", e.getPhone());				}								data.put("sendTime",sms.getSendTime());				sms.setContent(FreemarkerTemplateUtil.freemarkerProcess(data,notifyTemplate.getTemplate()));				this.saveSendSms(sms,order);			}			// 代客下单			if("1".equals(order.getIsSysOrder())){				log.info("订单{}，是代客下单订单：准备给客户发送短信",order.getSerialId());				nt = new NotifyTemplate();				nt.setCode("order_status_init_guest");				notifyTemplate = dao.selectOne(nt);				if(StrUtils.isNotEmpty(notifyTemplate)){					log.info("订单{}，是代客下单订单：准备给客户发送短信-已找到模板",order.getSerialId());					sms.setPhone(order.getAccount());					sms.setSendTime(ApDateTime.getNowDateTime(ApDateTime.DATE_TIME_Sec));					Map<String,String> data = new HashMap<String, String>();					data.put("orderId", order.getSerialId());//					data.put("sysAcount", order.getSysAccount());					data.put("sendTime",sms.getSendTime());					data.put("number", order.getNumber()+"");					data.put("amount", order.getAmount());					sms.setContent(FreemarkerTemplateUtil.freemarkerProcess(data,notifyTemplate.getTemplate()));					this.saveSendSms(sms,order);				}else{					log.error("订单{}，是代客下单订单：准备给客户发送短信  未找到模板",order.getSerialId());				}			}					}				//订单处理;给客户和采购发送短信		if(Order.order_status_pass.equals(orderStatus)){			String phones = this.getUserPhone(ids);			//Account acc = LoginUserHolder.getLoginAccount();			//Account e = accountService.selectById(acc.getId());			if(StrUtils.isNotEmpty(phones)){				 phones=phones+","+order.getAccount();				sms.setPhone(phones);				sms.setSendTime(ApDateTime.getNowDateTime(ApDateTime.DATE_TIME_Sec));				Map<String,String> data = new HashMap<String, String>();				data.put("orderId", order.getSerialId());//				data.put("account",  order.getAccount());				sms.setContent(FreemarkerTemplateUtil.freemarkerProcess(data,notifyTemplate.getTemplate()));				this.saveSendSms(sms,order);			}		}				//财务审核  客户、采购、销售		if(Order.order_status_stock.equals(orderStatus)){			//-------------------------给采购发送-----------------------			log.info("订单{}，是财务审核：准备给采购发信息",order.getSerialId());			NotifyTemplate nts = new NotifyTemplate();			NotifyTemplate notifyTemplates = new NotifyTemplate();			nts.setCode("order_status_stock_cg");			notifyTemplates = dao.selectOne(nts);			String idss=notifyTemplates.getAcceptId();			String phones = this.getUserPhone(idss);			if(StrUtils.isNotEmpty(notifyTemplates)){				log.info("订单{}，是财务审核：准备给采购发信息：准备给销售、采购发送短信-已找到模板",order.getSerialId());				sms.setPhone(phones);				sms.setSendTime(ApDateTime.getNowDateTime(ApDateTime.DATE_TIME_Sec));				Map<String,String> data = new HashMap<String, String>();				data.put("orderId", order.getSerialId());				sms.setContent(FreemarkerTemplateUtil.freemarkerProcess(data,notifyTemplates.getTemplate()));				this.saveSendSms(sms,order);			}else{				log.error("订单{}，是财务审核：准备给采购发信息：准备给销售、采购发送短信-未找到模板",order.getSerialId());			}			            if(StrUtils.isNotEmpty(order.getCommisionUser())){//销售如果存在            	//-------------------------给销售发送-----------------------    			log.info("订单{}，是财务审核：准备给销售发信息",order.getSerialId());    			NotifyTemplate ntx = new NotifyTemplate();    			NotifyTemplate notifyTemplatex = new NotifyTemplate();    			ntx.setCode("order_status_stock_xs");    			notifyTemplatex = dao.selectOne(ntx);    			if(StrUtils.isNotEmpty(notifyTemplates)){    				log.info("订单{}，是财务审核：准备给采购发信息：准备给销售、采购发送短信-已找到模板",order.getSerialId());    				sms.setPhone(phones);    				sms.setSendTime(ApDateTime.getNowDateTime(ApDateTime.DATE_TIME_Sec));    				Map<String,String> data = new HashMap<String, String>();    				data.put("phone", order.getAccount());    				data.put("orderId", order.getSerialId());    				sms.setContent(FreemarkerTemplateUtil.freemarkerProcess(data,notifyTemplatex.getTemplate()));    				this.saveSendSms(sms,order);    			}else{    				log.error("订单{}，是财务审核：准备给采购发信息：准备给销售、采购发送短信-未找到模板",order.getSerialId());    			}			}else{				log.error("订单{}，销售不存在",order.getSerialId());			}								   //---------------------------给客户发送---------------------			nt = new NotifyTemplate();			nt.setCode("order_status_stock");			notifyTemplate = dao.selectOne(nt);			if(StrUtils.isNotEmpty(notifyTemplate)){				log.info("订单{}，是财务审核：准备给客户发货：准备给客户发送短信-已找到模板",order.getSerialId());				sms.setPhone(order.getAccount());				sms.setSendTime(ApDateTime.getNowDateTime(ApDateTime.DATE_TIME_Sec));				Map<String,String> data = new HashMap<String, String>();				data.put("orderId", order.getSerialId());				sms.setContent(FreemarkerTemplateUtil.freemarkerProcess(data,notifyTemplate.getTemplate()));				this.saveSendSms(sms,order);			}else{				log.error("订单{}，是财务审核：准备给客户发货：准备给客户发送短信  未找到模板",order.getSerialId());			}		}				//发货;给客户发送短信		if(Order.order_status_send.equals(orderStatus)){			String phones = this.getUserPhone(ids);			Ordership ordership = new Ordership();			ordership.setOrderid(order.getId());			ordership = ordershipService.selectOne(ordership);			if(StrUtils.isEmpty(ordership.getPhone())){				return ;			}			sms.setSendTime(ApDateTime.getNowDateTime(ApDateTime.DATE_TIME_Sec));			//客户手机号码;			phones=phones+","+ordership.getPhone();			sms.setPhone(phones);			Map<String,String> data = new HashMap<String, String>();			data.put("orderId", order.getSerialId());//			data.put("expressNo", order.getExpressNo());//			data.put("account",order.getShipname());			data.put("number", order.getNumber()+"");			data.put("sendTime", order.getSendDate());			data.put("express", order.getExpressCompanyName());			sms.setContent(FreemarkerTemplateUtil.freemarkerProcess(data,notifyTemplate.getTemplate()));			this.saveSendSms(sms,order);		}		log.info("order send sendOrderSms ID: {} ,status : {} end",order.getId(),order.getStatus());	}//尊敬的【${account}】\:您的订单:【${orderId】,共计\:【${number}】件商品已于【${sendTime}】安排发货,物流公司\:【${express}】单号\:【${expressNo}】,请注意查收,谢谢您的支持【指电分销平台】	//【${phone}】已于【${sendTime}】在指电分销平台成功下单，订单号：【${orderId}】【指电分销平台】	private void saveSendSms(Sms sms,Order order){		try {			SMSUtil.sendSMS(sms);			smsDao.insert(sms);		} catch (Exception e1) {			log.error("send sms faild,",e1);		}	}		private String getUserPhone(String ids){		if(StrUtils.isEmpty(ids)){			return "";		}		// 以逗号分割		String[] id = ids.split(",");		// 拼接手机号		List<Map<String, Object>> Lists = userService.selectIds(id);		String phones = "";		for (int i = 0; i < Lists.size(); i++) {			Map<String, Object> listMap = Lists.get(i);			if(StrUtils.isNotEmpty(phones)){				phones +=",";			}			phones +=listMap.get("phone").toString();		}		log.info("getUserPhone  ids:{},phones:{}",ids,phones);		return phones;	}	@Override	public void sendOrderSms(String id, String accountId, String status ,String phone ,String serialId) {		Order order = new Order();		order.setId(id);		order.setSerialId(serialId);		order.setStatus(status);		order.setAccountId(accountId);		order.setPhone(phone);		this.sendOrderSms(order);	}			/**	 * 查询订单对应的销售的手机号	 */	public User getUserPhones(User user){		user=userService.selectOne(user);		return user;	}	}