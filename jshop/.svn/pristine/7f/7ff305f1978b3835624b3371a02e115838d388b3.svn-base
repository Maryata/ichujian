package net.jeeshop.web.action.manage.account;import java.io.IOException;import java.util.List;import java.util.Map;import javax.servlet.ServletRequest;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpSession;import net.jeeshop.core.KeyValueHelper;import net.jeeshop.core.ManageContainer;import net.jeeshop.core.Services;import net.jeeshop.core.dao.page.PagerModel;import net.jeeshop.core.system.bean.TreeItem;import net.jeeshop.core.system.bean.User;import net.jeeshop.core.util.ApDateTime;import net.jeeshop.core.util.MD5;import net.jeeshop.core.util.StrUtils;import net.jeeshop.services.manage.account.AccountService;import net.jeeshop.services.manage.account.bean.Account;import net.jeeshop.services.manage.discntSolutn.DiscntSolutnService;import net.jeeshop.services.manage.discntSolutn.bean.DiscntSolutn;import net.jeeshop.services.manage.product.ProductService;import net.jeeshop.services.manage.product.bean.Product;import net.jeeshop.services.manage.system.DeptService;import net.jeeshop.web.action.BaseController;import net.jeeshop.web.action.front.orders.CartInfo;import net.jeeshop.web.action.front.orders.CartInfoHelp;import net.jeeshop.web.util.RequestHolder;import net.sf.json.JSONArray;import net.sf.json.JSONObject;import org.apache.commons.lang.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;/** * 会员管理 * @author dylan */@Controller@RequestMapping("/manage/account/")public class AccountAction extends BaseController<Account> {	private static final Logger logger = LoggerFactory.getLogger(AccountAction.class);	private static final long serialVersionUID = 1L;    @Autowired	private AccountService accountService;        @Autowired    private DeptService deptService;        @Autowired    private DiscntSolutnService dsService;         @Autowired    private ProductService productService;    //	private AreaService areaService;//	public void setAreaService(AreaService areaService) {//		this.areaService = areaService;//	}//    <result name="loginSuccess">/toIndex.jsp</result>//    <result name="loginFaild">/login.jsp</result>//    <result name="regeistSuccess" type="redirect">/regeist_success.jsp</result>//    <result name="loginOut">/toIndex.jsp</result>//    <result name="regFaild">/regeistFalid.jsp</result>    private static final String page_toList = "/manage/account/accountList";    private static final String page_toEdit = "/manage/account/accountEdit";    private static final String page_freeze = "/manage/account/freeze";    private static final String page_show = "/manage/account/show";    private AccountAction(){        super.page_toList = page_toList;        super.page_toAdd = null;        super.page_toEdit = page_toEdit;    }    @Override	protected void selectListAfter(PagerModel pager) {		pager.setPagerUrl("selectList");	}	public void setAccountService(AccountService accountService) {		this.accountService = accountService;	}    @Override    public void insertAfter(Account e) {        e.clear();    }    @Override    public Services<Account> getService() {        return accountService;    }    @Override    @RequestMapping("toAccontEdit")	public String toEdit(Account e, ModelMap model) throws Exception {        e = getService().selectOne(e);		getKeyValue(e);		// User u = (User) session.getAttribute(ManageContainer.manage_session_user_info);        model.addAttribute("e", e);        // 获取折扣方案        List<DiscntSolutn> dsList = dsService.selectList(new DiscntSolutn());        // 获取激活码        List<Product> actCodes = productService.selectActiveCodeList();                model.addAttribute("dsList", dsList);        model.addAttribute("actCodes", actCodes);        return page_toEdit;	}	/**	 * 根据键获取值	 */	private void getKeyValue(Account e) {		if(StringUtils.isNotBlank(e.getAccountType())){			e.setAccountTypeName(KeyValueHelper.get("account_accountType_"+e.getAccountType()));		}else{			e.setAccountTypeName("系统会员");		}		if(StringUtils.isNotBlank(e.getRank())){			e.setRankName(KeyValueHelper.get("account_rank_"+e.getRank()));		}	}		/**	 * 根据会员账号查询会员信息	 * @return	 * @throws Exception	 * 	 */    @RequestMapping("show")	public String show(Account e, ModelMap model) throws Exception {		String account = e.getAccount();		if(StringUtils.isBlank(account)){			throw new NullPointerException("账号不能为空！");		}		e.clear();  		e.setAccount(account);		e = getService().selectOne(e);		if(e==null){			throw new NullPointerException("系统查询不到账号为"+account+"的用户信息！");		}		getKeyValue(e);		model.addAttribute("e", e);		 // 获取折扣方案        List<DiscntSolutn> dsList = dsService.selectList(new DiscntSolutn());        model.addAttribute("dsList", dsList);		return page_show;	}		/**	 * 重置会员密码，发送重置好的密码到会员邮箱	 * @return	 * @throws Exception	 */    @RequestMapping(value = "show", method = RequestMethod.POST)	public String czmm(@RequestParam(required = false)String id) throws Exception{		Account acc = new Account();		acc.setId(id);		acc.setPassword(MD5.md5("111111"));		accountService.update(acc);		return selectList(RequestHolder.getRequest(), acc);	}		/**	 * 转到冻结页面	 * @return	 */    @RequestMapping(value = "toFreeze")	public String toFreeze(Account e, ModelMap model) throws Exception {		logger.error("AccountAction.toFreeze id = " + e.getId());		if(StringUtils.isBlank(e.getId())){			throw new NullPointerException("参数不能为空");		}				e = accountService.selectById(e.getId());		if(e==null){			throw new NullPointerException("根据用户ID查询不到用户信息");		}        model.addAttribute("e", e);		return page_freeze;	}		/**	 * 冻结用户	 * @return	 * @throws Exception 	 */    @RequestMapping(value = "updateFreeze", method = RequestMethod.POST)	public String updateFreeze(@ModelAttribute("e") Account e) throws Exception {		logger.error("AccountAction.freeze id = " + e.getId());		if(StringUtils.isBlank(e.getId())){			throw new NullPointerException("参数不能为空");		}				accountService.update(e);				e.clear();		return super.selectList(RequestHolder.getRequest(), e);	}	//	public String testUpdateScoure(){//		logger.error("testUpdateScoure...");//		WebApplicationContext app = WebApplicationContextUtils.getWebApplicationContext(getRequest().getSession().getServletContext());//		net.jeeshop.services.front.account.AccountService accountServiceFront = (net.jeeshop.services.front.account.AccountService) app.getBean("accountServiceFront");//		net.jeeshop.services.front.account.bean.Account acc = new net.jeeshop.services.front.account.bean.Account();//		acc.setAccount("test1");//		acc.setAddScore(1200);//		accountServiceFront.updateScore(acc);//		return null;//	}		/**	 * 分页查询会员信息	 *///	@Override//	public String selectList() throws Exception {//		super.selectList();//		if(pager.getList()!=null && pager.getList().size()>0){//			for(int i=0;i<pager.getList().size();i++){//				Account acc = (Account)pager.getList().get(i);//				if(StringUtils.isNotBlank(acc.getOpenId())){//腾讯QQ//					//				}//			}//		}//		return toList;//	}        /**     * 加载所有部门下的销售人员     * @param request     * @return     */    @RequestMapping(value="loadDeptTree")    @ResponseBody    public String loadDeptTree(HttpServletRequest request){    	// 查询会员    	String id = request.getParameter("id");    	Account account = accountService.selectById(id);    	// 加载部门下的所有会员    	List<TreeItem> deptTree = deptService.getDeptTree();    	// 勾选会员对应的销售    	if(StrUtils.isNotEmpty(account.getSaleId())){    		this.checkSaler(account.getSaleId(),deptTree);    	}    	return JSONArray.fromObject(deptTree).toString();    }    /**     * 查询所有部门人员  和   用户     * @param request     * @return     */    //@RequestMapping(value="loadAll")    //@ResponseBody    //public String loadAll(HttpServletRequest request){    	// 加载部门下的所有人员    	//List<TreeItem> deptTree = deptService.getDeptTree();    	//logger.debug(JSONArray.fromObject(deptTree).toString());		//    	//JSONArray.fromObject(deptTree).toString();    	//JSONArray json =new JSONArray();    	//json.add();    	//return JSONArray.fromObject(deptTree).toString();   // }        /**     * 勾选会员对应的销售     * @param saleId 销售id     * @param deptTree 所有部门下的会员     */	private void checkSaler(String saleId, List<TreeItem> deptTree) {		if(null!=deptTree && deptTree.size()>0){			for (int i = 0; i < deptTree.size(); i++) {				TreeItem item = deptTree.get(i);				if(saleId.equals(item.getId())){					item.setChecked(true);				}else if(null!= item.getChildren() && item.getChildren().size()>0){					this.checkSaler(saleId, item.getChildren());				}			}		}	}    	/**	 * 更新会员信息	 * @param e	 * @return	 */    @RequestMapping(value="updateAccount",method=RequestMethod.POST)    public String updateAccount(Account e,HttpSession session){    	// 更新会员信息    	  User u = (User) session.getAttribute(ManageContainer.manage_session_user_info);    	if(StrUtils.isNotEmpty(e) && ("1").equals(e.getAccType()) && ("0").equals(e.getAuditStatus())){			// 获取当前登录人    			e.setAuditUser(u.getUsername());    			e.setAuditStatus("1");    			e.setAuditTime(ApDateTime.getNowDateTime(ApDateTime.DATE_TIME_SSS));    			//清空当前设置用户的购物车    			CartInfoHelp.getInstance().setMyCart(new CartInfo(), e.getId());    	}    	String activeCode_old = RequestHolder.getRequest().getParameter("activeCode_old");    	if(!e.getActiveCode().equals(activeCode_old)){    		CartInfoHelp.getInstance().setMyCart(new CartInfo(), e.getId());    	}    	accountService.update(e);    	return "redirect:selectList";    }        /**     * 同步用户到核心系统     * @param request     * @return     */    @RequestMapping(value="syncAccount2Sys")    @ResponseBody    public String syncAccount2Sys(HttpServletRequest request){    	// 查询会员    	String id = request.getParameter("id");    	Map<String,Object> result = accountService.syncAccount2Sys(id);    	return  JSONObject.fromObject(result).toString();    			//JSONArray.fromObject(result).toString();    }          @RequestMapping(value="valetOrder")    @ResponseBody    public String valetOrder(Account e,HttpSession session){    	int row=0;    	JSONObject json = new JSONObject();    	String isSysAccount = RequestHolder.getRequest().getParameter("isSysAccount");    	String id = RequestHolder.getRequest().getParameter("id");    	if(StrUtils.isNotEmpty(isSysAccount)){    		e.setIsSysAccount(isSysAccount);    		e.setId(id);    		e.setAccPrice("");        	row=accountService.update(e);        	if(row>0){        		json.put("msg", "修改成功");        		json.put("status", "1");        	}else{        		json.put("msg", "转换失败");        		json.put("status", "0");        	}        	json.put("isSys", isSysAccount);    	}		return json.toString();    }}