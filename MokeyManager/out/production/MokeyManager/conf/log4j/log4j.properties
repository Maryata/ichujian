#log4j.rootLogger=debug,FILE,CONSOLE
log4j.addivity.org.apache=true
log4j.appender.encoding = GBK

log4j.logger.com.org=debug,FILE,CONSOLE
log4j.logger.org.apache.struts2=error,FILE,CONSOLE
log4j.logger.org.springframework=error,FILE,CONSOLE

#########################################################配置详解#########################################################
# 1.配置根Logger.rootLogger
# log4j.rootLogger = [ level ] , appenderName, appenderName, …
# level 是日志记录的优先级，分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者您定义的级别。Log4j建议只使用四个级别，优先级从高到低分别是ERROR、WARN、INFO、DEBUG。通过在这里定义的级别，您可以控制到应用程序中相应级别的日志信息的开关。比如在这里定义了INFO级别，则应用程序中所有DEBUG级别的日志信息将不被打印出来。
# appenderName就是指定日志信息输出到哪个地方。您可以同时指定多个输出目的地

# 2.配置日志信息输出目的地Appender
# Log4j提供的appender有以下几种：
# org.apache.log4j.ConsoleAppender（控制台），
# org.apache.log4j.FileAppender（文件），
# org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
# org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），
# org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
# (1).ConsoleAppender选项
# Threshold=WARN:指定日志消息的输出最低层次。
# ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。
# Target=System.err：默认情况下是：System.out,指定输出控制台
# (2).FileAppender 选项
# Threshold=WARN:指定日志消息的输出最低层次。
# ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。
# File=mylog.txt:指定消息输出到mylog.txt文件。TOMCAT默认${catalina.base}/bin。
# Append=false:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。
# (3).DailyRollingFileAppender 选项
# Threshold=WARN:指定日志消息的输出最低层次。
# ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。
# File=mylog.txt:指定消息输出到mylog.txt文件。
# Append=false:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。
# DatePattern=’.'yyyy-ww:每周滚动一次文件，即每周产生一个新的文件。当然也可以指定按月、周、天、时和分。即对应的格式如下：
#   1)’.'yyyy-MM: 每月
#   2)’.'yyyy-ww: 每周
#   3)’.'yyyy-MM-dd: 每天
#   4)’.'yyyy-MM-dd-a: 每天两次
#   5)’.'yyyy-MM-dd-HH: 每小时
#   6)’.'yyyy-MM-dd-HH-mm: 每分钟
# (4).RollingFileAppender 选项
# Threshold=WARN:指定日志消息的输出最低层次。
# ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。
# File=mylog.txt:指定消息输出到mylog.txt文件。
# Append=false:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。
# MaxFileSize=100KB: 后缀可以是KB, MB 或者是 GB. 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到mylog.log.1文件。
# MaxBackupIndex=2:指定可以产生的滚动文件的最大数。

# 3.配置日志信息的布局，其语法为：
# log4j.appender.appenderName.layout = fully.qualified.name.of.layout.class
# log4j.appender.appenderName.layout.option1 = value1
# …
# log4j.appender.appenderName.layout.option = valueN
# 其中，Log4j提供的layout有以下几种：
# org.apache.log4j.HTMLLayout（以HTML表格形式布局），
# org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
# org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
# org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
# org.apache.log4j.xml.XMLLayout

# 4.输出格式设置 ConversionPattern
# 在配置文件中可以通过log4j.appender.A1.layout.ConversionPattern设置日志输出格式。
# 参数：
# %p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,
# %d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
# %r: 输出自应用启动到输出该log信息耗费的毫秒数
# %c: 输出日志信息所属的类目，通常就是所在类的全名
# %t: 输出产生该日志事件的线程名
# %l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
# %x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。
# %%: 输出一个”%”字符
# %F: 输出日志消息产生时所在的文件名称
# %L: 输出代码中的行号
# %m: 输出代码中指定的消息,产生的日志具体信息
# %n: 输出一个回车换行符，Windows平台为”\r\n”，Unix平台为”\n”输出日志信息换行
# 可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如：
# 1)%20c：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。
# 2)%-20c:指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，”-”号指定左对齐。
# 3)%.30c:指定输出category的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格。
# 4)%20.30c:如果category的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边交远销出的字符截掉。

# 5.代码
# 推荐使用方法：
# private static Log log = LogFactory.getLog(MyClass.class);
# log.debug("message");log.info("message");log.warn("message");log.error("message");log.fatal("message");
#########################################################配置详解#########################################################

###########################
# appender配置，罗列7种常用
###########################
# 1.应用于控制台
###################
#log4j.appender.SMALLEST=org.apache.log4j.ConsoleAppender
#log4j.appender.SMALLEST.Threshold=WARN
#log4j.appender.SMALLEST.Target=System.out
#log4j.appender.SMALLEST.layout=org.apache.log4j.PatternLayout
#log4j.appender.SMALLEST.layout.ConversionPattern=[DATAONLINE] %d %-5p -%-4r [%t] %c %x - %m%n
#log4j.appender.SMALLEST.layout.ConversionPattern=[start]%d{DATE}[DATE]%n%p[PRIORITY]%n%x[NDC]%n%t[thread] n%c[CATEGORY]%n%m[MESSAGE]%n%n

log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
log4j.appender.CONSOLE.Threshold=debug
log4j.appender.CONSOLE.Target=System.out
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout
log4j.appender.CONSOLE.layout.ConversionPattern=%d %-5p [%t] %c{1}:%L %x - %m%n
#log4j.appender.CONSOLE.layout.ConversionPattern=[start]%d{DATE}[DATE]%n%p[PRIORITY]%n%x[NDC]%n%t[thread] n%c[CATEGORY]%n%m[MESSAGE]%n%n


###################
# 2.应用于文件[每日一个文件]
###################
log4j.appender.FILE=org.apache.log4j.DailyRollingFileAppender
log4j.appender.FILE.Threshold=debug
log4j.appender.FILE.File=${catalina.base}/logs/DATAONLINE/daily.log
log4j.appender.FILE.Append=true
log4j.appender.FILE.DatePattern='.'yyyy-MM-dd-a
log4j.appender.FILE.layout=org.apache.log4j.PatternLayout
log4j.appender.FILE.layout.ConversionPattern=%d %-5p -%-4r [%t] %c{1}:%L %x - %m%n
#log4j.appender.FILE.layout.ConversionPattern=%d %-5p -%-4r [%t] %c %x - %m%n

###################
# 3.应用于文件回滚
###################
#log4j.appender.SMALLEST=org.apache.log4j.RollingFileAppender
#log4j.appender.SMALLEST.Threshold=INFO
#log4j.appender.SMALLEST.File=${catalina.base}/logs/DATAONLINE/rolling.log
#log4j.appender.SMALLEST.Append=true
#log4j.appender.SMALLEST.MaxFileSize=1MB
#log4j.appender.SMALLEST.MaxBackupIndex=1
#log4j.appender.SMALLEST.layout=org.apache.log4j.PatternLayout
#log4j.appender.SMALLEST.layout.ConversionPattern=[DATAONLINE] %d %-5p -%-4r [%t] %c %x - %m%n


###################
# 4.应用于socket
###################
#log4j.appender.SMALLEST=org.apache.log4j.net.SocketAppender
#log4j.appender.SMALLEST=org.apache.log4j.net.SocketAppender
#log4j.appender.SMALLEST.RemoteHost=localhost
#log4j.appender.SMALLEST.Port=5001
#log4j.appender.SMALLEST.LocationInfo=true
# Set up for Log Facter 5
#log4j.appender.SMALLEST.layout=org.apache.log4j.PatternLayout
#log4j.appender.SMALLEST.layout.ConversionPattern=[DATAONLINE] %d %-5p -%-4r [%t] %c %x - %m%n

###################
# 5.应用于数据库 略
###################

###################
# 6.应用于WIN2000 NT系统日志
# log4j.appender.SMALLEST=org.apache.log4j.nt.NTEventLogAppender
###################

###################
# 7.应用于Email
###################
#log4j.appender.MAIL=org.apache.log4j.net.SMTPAppender
#Email只能发送ERROR级别以上的错误
#log4j.appender.MAIL.Threshold=ERROR
# 缓存文件大小，日志达到10K时发送Email
#log4j.appender.MAIL.BufferSize=10
# 发送邮件的服务器
#log4j.appender.MAIL.SMTPHost=mail.comratings.com
#log4j.appender.MAIL.Subject=[DATAONLINE.TEST] 错误日志
#log4j.appender.MAIL.SMTPUsername=webmaster
#log4j.appender.MAIL.SMTPPassword=50272830
#log4j.appender.MAIL.From=webmaster@comratings.com
#多个接受者
#log4j.appender.MAIL.To=jerry.zhang@comratings.com,kin.xu@comratings.com,guoqiang.zhang@comratings.com
#log4j.appender.MAIL.layout=org.apache.log4j.PatternLayout
#log4j.appender.MAIL.layout.ConversionPattern=[DATAONLINE.TEST] %d %-5p -%-4r [%t] %c %x - %m%n

