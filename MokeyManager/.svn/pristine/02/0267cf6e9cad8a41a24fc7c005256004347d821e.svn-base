/**
 * 
 */
package com.org.mokey.util;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URL;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.jdbc.core.JdbcTemplate;

import com.org.mokey.common.util.file.FileServices;

/**
 * @author vpc
 */
public class McrAppImport {
	private static ApplicationContext context;
	private static JdbcTemplate jdbcTemplate;
	private static ClassLoader loader;

	static {
		context = new ClassPathXmlApplicationContext(
				"classpath:conf/spring/applicationContext.xml" );
		jdbcTemplate = context.getBean( "jdbcTemplate", JdbcTemplate.class );
		loader = McrAppImport.class.getClassLoader();
	}

	public static void main(String[] args) throws InvalidFormatException,
			FileNotFoundException, IOException, SQLException {
		imp();
	}

	public static void imp() throws InvalidFormatException,
			FileNotFoundException, IOException, SQLException {
		// Use an InputStream, needs more memory
		Workbook wb = WorkbookFactory.create( loader
				.getResourceAsStream( "data/mcrapp/xlsx/微应用.xlsx" ) );

		final String sql = "insert into t_mcrapp_info(c_name,c_appurl,c_abstract,c_logourl,c_category,c_number_of_favorites,c_name_cn,c_id) values(?,?,?,?,?,?,?,?)";
		final String sql_mcrapp_category_mcrapp = "insert into t_mcrapp_category_mcrapp(c_id,c_aid,c_cid) values(SEQ_MCRAPP_CATEGORY_MCRAPP.nextval,?,?)";

		int numberOfSheets = wb.getNumberOfSheets();
		long appid = 0;
		for ( int i = 0; i < numberOfSheets; ++i ) {
			Sheet sheet = wb.getSheetAt( i );
			String sheetName = sheet.getSheetName();
			System.out.println("sheet -->  app count -->" + appid);
			int endIndex = sheetName.indexOf( '(' );
			if(endIndex == -1) {
				endIndex = sheetName.indexOf( '（' );
			}
			
			String category = sheetName.substring( 0, endIndex );

			int categoryId = persist( category );

			int rowStart = sheet.getFirstRowNum() + 1;
			int rowEnd = sheet.getLastRowNum() + 10;

			List<Object[]> batchArgs = new ArrayList<Object[]>();
			List<Object[]> appBatchArgs = new ArrayList<Object[]>();

			for ( int rowNum = rowStart; rowNum < rowEnd; ++rowNum ) {
				Row r = sheet.getRow( rowNum );
				if ( r == null ) {
					// This whole row is empty
					// Handle it as needed
					continue;
				}

				int lastColumn = r.getLastCellNum();
				
				if(lastColumn != 4) {
					
					continue;
				}

				Object[] objArray = new Object[lastColumn + 4];
				for ( int cn = 0; cn < lastColumn; cn++ ) {
					
					Cell c = r.getCell( cn, Row.RETURN_BLANK_AS_NULL );
					
					if ( c == null ) {
						if(cn == 0) {
							System.out.println("debug : -- rowNum--> " + rowNum);
							break;
						}
						// The spreadsheet is empty in this cell
					} else {
						Object value = null;
						if ( cn == 0 ) {
							value = getCellValue( c );
				
							objArray[lastColumn + 2] = Cn2Spell
									.converterToSpellTrim( String
											.valueOf( value.toString().charAt( 0 ) ) );
							objArray[lastColumn + 3] = ++appid;
							
							batchArgs.add( new Object[] {
									objArray[lastColumn + 3], categoryId } );
						} else if ( cn == lastColumn - 1 ) {
							String filename = String
									.valueOf( getCellValue( c ) );
							String path = "data/mcrapp/logo/_" + i + "/"
									+ filename.substring( 0,
											filename.indexOf( '.' ) );
							URL url = null;
							
							String[] suffix = new String[] {".png",".jpg",".jpg.png",".jpg.jpg",".png.png",".png.jpg",".jpg.gif"};
							int k = 0;
							do {
								if(url == null) {
									url = loader.getResource( path + suffix[k++] );
								} else {
									break;
								}
							} while(k < suffix.length);
							
							
							File file = null;
							if ( url != null ) {
								file = new File( url.getFile() );
							} else {
								System.out.println( path );
							}

							if ( file != null && file.exists() ) {
								filename = filename.substring( 0,
										filename.lastIndexOf( '.' ) )
										+ System.currentTimeMillis()
										+ filename.substring( filename
												.lastIndexOf( '.' ) );

								value = FileServices
										.saveFile(
												file,
												"mcrapp/logo/" + filename);
							} else {
								value = "";
							}

							objArray[lastColumn] = categoryId;
							objArray[lastColumn + 1] = Math.round( Math
									.random() * 200 );
						} else {
							value = getCellValue( c );
						}

						objArray[cn] = value;
					}
				}
				
				if(null != objArray[0]) {
					appBatchArgs.add( objArray );					
				}

			}
			
			jdbcTemplate.batchUpdate( sql, appBatchArgs );

			jdbcTemplate
					.batchUpdate( sql_mcrapp_category_mcrapp, batchArgs );
			
			System.out.println("app count -->" + appBatchArgs.size());
			appBatchArgs = null;
			batchArgs = null;
		}
		
		System.exit( 0 );
	}

	private static Object getCellValue(Cell cell) {
		Object o = null;
		switch ( cell.getCellType() ) {
		case Cell.CELL_TYPE_STRING:
			o = cell.getRichStringCellValue().getString();
			break;
		case Cell.CELL_TYPE_NUMERIC:
			if ( DateUtil.isCellDateFormatted( cell ) ) {
				o = cell.getDateCellValue();
			} else {
				o = cell.getNumericCellValue();
			}
			break;
		case Cell.CELL_TYPE_BOOLEAN:
			o = cell.getBooleanCellValue();
			break;
		case Cell.CELL_TYPE_FORMULA:
			o = cell.getCellFormula();
			break;
		default:

		}

		return o;
	}

	/**
	 * @Description: TODO
	 * @param category
	 * @return
	 */
	private static int persist(String category) {
		Integer nextSeq = jdbcTemplate.queryForObject(
				"select SEQ_MCRAPP_CATEGORY.nextVal from dual",
				new Object[] {}, Integer.class );

		jdbcTemplate.update(
				"INSERT INTO t_mcrapp_category (C_ID, C_NAME) VALUES (?, ?)",
				new Object[] { nextSeq, category, } );

		return nextSeq;
	}
}
