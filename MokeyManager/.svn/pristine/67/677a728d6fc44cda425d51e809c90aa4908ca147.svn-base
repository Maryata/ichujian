package com.org.mokey.analyse.service.impl;import com.org.mokey.analyse.action.EkeyKeyUsingAction;import com.org.mokey.analyse.dao.EkeyKeyUsingDao;import com.org.mokey.analyse.dao.UserAnalyseDao;import com.org.mokey.analyse.service.EkeyKeyUsingService;import com.org.mokey.analyse.vo.EkeyKeyBean;import com.org.mokey.analyse.vo.EkeyKeyUsingBean;import com.org.mokey.common.util.ApDateTime;import com.org.mokey.util.StrUtils;import org.apache.commons.collections.map.LinkedMap;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.text.DecimalFormat;import java.util.*;/** * Created by Maryn on 2016/4/5. */@Servicepublic class EkeyKeyUsingServiceImpl implements EkeyKeyUsingService {    private static final Log LOGGER = LogFactory.getLog(EkeyKeyUsingServiceImpl.class);    @Autowired    private EkeyKeyUsingDao ekeyKeyUsingDao;    @Autowired    private UserAnalyseDao userAnalyseDao;    @Autowired    private UserAnalyseServiceImpl userAnalyseServiceImpl;    @Override    // 查询用户按键使用情况    public List<EkeyKeyUsingBean> keyUsingData(String timePattern, String userId, String timeType, String userType, String supCode, String sDate, String eDate) {        List<EkeyKeyUsingBean> initData = new ArrayList<>();        try {            /** 初始化数据 */            List<String> timeBetween = new ArrayList<>();            if (EkeyKeyUsingAction.TIMETYPE_DAY.equals(timeType)) {                timeBetween = ApDateTime.getDayBetween(sDate, eDate);            } else if (EkeyKeyUsingAction.TIMETYPE_MONTH.equals(timeType)) {                timeBetween = ApDateTime.getMonthBetween(sDate, eDate);            }            if (timeBetween.size() > 0) {                for (int i = 0; i < timeBetween.size(); i++) {                    EkeyKeyUsingBean keyUsingBean = new EkeyKeyUsingBean();                    keyUsingBean.setTimeStr(timeBetween.get(i));                    initData.add(keyUsingBean);                }            }            List<Map<String, Object>> countOfActiveUser;// 激活用户数            List<Map<String, Object>> countOfUsingUser;// 使用用户数            List<Map<String, Object>> timesOfUsingUser;// 使用次数            /** 1.查询激活用户数 */            List<String> supCodes = new ArrayList<>();            if (StrUtils.isEmpty(supCode)) {                // 查询当前用户可见的供应商                List<Map<String, Object>> visibleSupplier = userAnalyseDao.visibleSupplier(userId, "0");                supCodes = userAnalyseServiceImpl.getSupCodeList(visibleSupplier);            } else {                supCodes.add(supCode);            }            // 查询指定时间段每天/每月的激活用户数            countOfActiveUser = ekeyKeyUsingDao.countOfActiveUsers(timePattern, supCodes, sDate, eDate);            long countOfActiveUsersUtilSDate = 0L;            // 如果userType=2，则查询截至sDate这一时间之前激活用户数            if (EkeyKeyUsingAction.USERTYPE_ALL.equals(userType)) {                // 查询截至sDate这一时间之前激活用户数                countOfActiveUsersUtilSDate = ekeyKeyUsingDao.countOfActiveUsersUtilSDate(timePattern, supCodes, sDate);            }            /** 2.查询使用人数 */            countOfUsingUser = ekeyKeyUsingDao.countOfUsingUser(timePattern, supCodes, sDate, eDate);            /** 3.查询使用次数 */            timesOfUsingUser = ekeyKeyUsingDao.timesOfUsingUser(timePattern, supCodes, sDate, eDate);            /** 组装每一行的数据 */            getKeyUsingData(timeType, initData, countOfActiveUser, timeBetween, countOfActiveUsersUtilSDate, countOfUsingUser, timesOfUsingUser);            /** “合计行”数据 */            getSumData(initData, userType);        } catch (Exception e) {            LOGGER.error("EkeyKeyUsingServiceImpl.keyUsingData failed ! e : ", e);        }        return initData;    }    /**     * 组装最终数据（按键使用情况）     *     * @param timeType                    时间类型     * @param initData                    初始化的数据     * @param countOfActiveUser           每天的激活用户数     * @param timeBetween                 日期集合     * @param countOfActiveUsersUtilSDate 第一天之前的所有激活用户数     * @param countOfUsingUser            每天每个键的使用人数     * @param timesOfUsingUser            每天每个键的使用次数     * @return     */    private void getKeyUsingData(            String timeType, List<EkeyKeyUsingBean> initData, List<Map<String, Object>> countOfActiveUser,            List<String> timeBetween, long countOfActiveUsersUtilSDate, List<Map<String, Object>> countOfUsingUser,            List<Map<String, Object>> timesOfUsingUser) {        // 如果获取的是所有激活用户，封装一个以每个时间节点为key,该时间节点之前的激活数为value的map        Map<String, Long> timeCountMap = new LinkedMap();        if (countOfActiveUsersUtilSDate != 0 && timeBetween.size() > 0) {            for (int i = 0; i < timeBetween.size(); i++) {                String time = timeBetween.get(i);                long countOfEachTime = 0L;                if (i == 0) {                    timeCountMap.put(time, countOfActiveUsersUtilSDate);                } else {                    // timeCountMap当前时间的前一天/前一月                    String timeBef = "";                    if (EkeyKeyUsingAction.TIMETYPE_DAY.equals(timeType)) {                        timeBef = ApDateTime.dateAdd("d", -1, time, ApDateTime.DATE_TIME_YMD);                    } else if (EkeyKeyUsingAction.TIMETYPE_MONTH.equals(timeType)) {                        timeBef = ApDateTime.dateAdd("m", -1, time, ApDateTime.DATE_TIME_YM);                    }                    if (countOfActiveUser.size() > 0) {                        for (int j = 0; j < countOfActiveUser.size(); j++) {                            Map<String, Object> map = countOfActiveUser.get(j);// 时间                            String day = StrUtils.emptyOrString(map.get("DAY"));// 激活人数                            if (!"".equals(timeBef) && timeBef.equals(day)) {                                countOfEachTime = StrUtils.zeroOrInt(map.get("TOTAL"));                                break;                            }                        }                    }                    timeCountMap.put(time, timeCountMap.get(timeBef) + countOfEachTime);                }            }        }        if (initData.size() > 0) {            for (EkeyKeyUsingBean keyUsingBean : initData) {                String timeStr = keyUsingBean.getTimeStr();// 时间                /** 激活人数 */                if (countOfActiveUser.size() > 0) {                    for (int i = 0; i < countOfActiveUser.size(); i++) {                        Map<String, Object> map = countOfActiveUser.get(i);// 时间                        String day = StrUtils.emptyOrString(map.get("DAY"));// 激活人数                        // 当天激活人数 OR 截至当天的所有激活人数                        long total = StrUtils.zeroOrInt(map.get("TOTAL"));//                        long total = StrUtils.zeroOrInt(map.get("TOTAL")) + countOfActiveUsersUtilSDate;                        if (timeStr.equals(day)) {                            if (countOfActiveUsersUtilSDate != 0) {                                keyUsingBean.setActCount(total + timeCountMap.get(day));                            } else {                                keyUsingBean.setActCount(total);                            }                            break;                        }                    }                }                /** 使用人数 */                setCountOfKeyUsing(keyUsingBean, timeStr, countOfUsingUser, "1");                /** 使用次数 */                setCountOfKeyUsing(keyUsingBean, timeStr, timesOfUsingUser, "2");                /** 当天的合计使用人数和合计使用次数 */                setSumCount(keyUsingBean);                /** 补全没有激活的时间的总激活人数 */                if (countOfActiveUsersUtilSDate != 0 && keyUsingBean.getActCount() == 0) {                    keyUsingBean.setActCount(timeCountMap.get(timeStr));                }            }        }    }    /**     * 设置按键使用人数/次数     *     * @param keyUsingBean 数据实例     * @param timeStr      时间     * @param list         数据集合     * @param s            数据类型 1.使用人数，2.使用次数     */    private void setCountOfKeyUsing(EkeyKeyUsingBean keyUsingBean, String timeStr, List<Map<String, Object>> list, String s) {        if (list.size() > 0) {            for (int i = 0; i < list.size(); i++) {                Map<String, Object> map = list.get(i);                String day = StrUtils.emptyOrString(map.get("DAY"));// 时间                String key = StrUtils.emptyOrString(map.get("KEY"));// 键位                long total = StrUtils.zeroOrInt(map.get("TOTAL"));// 总数                if (timeStr.equals(day)) {                    switch (key) {                        case "0":                            EkeyKeyBean keyBean_start = keyUsingBean.getKeyBean_start();                            setVariableValue(s, keyBean_start, total);                            break;                        case "1":                            EkeyKeyBean keyBean_1st = keyUsingBean.getKeyBean_1st();                            setVariableValue(s, keyBean_1st, total);                            keyUsingBean.setKeyBean_1st(keyBean_1st);                            break;                        case "2":                            EkeyKeyBean keyBean_2nd = keyUsingBean.getKeyBean_2nd();                            setVariableValue(s, keyBean_2nd, total);                            keyUsingBean.setKeyBean_2nd(keyBean_2nd);                            break;                        case "3":                            EkeyKeyBean keyBean_3rd = keyUsingBean.getKeyBean_3rd();                            setVariableValue(s, keyBean_3rd, total);                            keyUsingBean.setKeyBean_3rd(keyBean_3rd);                            break;                        case "4":                            EkeyKeyBean keyBean_4th = keyUsingBean.getKeyBean_4th();                            setVariableValue(s, keyBean_4th, total);                            keyUsingBean.setKeyBean_4th(keyBean_4th);                            break;                    }                }            }        }    }    /**     * 设置不同的变量值     *     * @param s       数据类型 1.使用人数，2.使用次数     * @param keyBean 按键对象     * @param total   数量     */    private void setVariableValue(String s, EkeyKeyBean keyBean, long total) {        if ("1".equals(s)) {            keyBean.setUsingUser(total);        } else if ("2".equals(s)) {            keyBean.setUsingTimes(total);        }    }    /**     * “合计”行的数据     *     * @param initData 真实数据     * @param userType     */    private void getSumData(List<EkeyKeyUsingBean> initData, String userType) {        EkeyKeyUsingBean totalkeyUsingBean = new EkeyKeyUsingBean();        totalkeyUsingBean.setTimeStr("合计");        if (initData.size() > 0) {            EkeyKeyBean keyBean_start = totalkeyUsingBean.getKeyBean_start();            EkeyKeyBean keyBean_1st = totalkeyUsingBean.getKeyBean_1st();            EkeyKeyBean keyBean_2nd = totalkeyUsingBean.getKeyBean_2nd();            EkeyKeyBean keyBean_3rd = totalkeyUsingBean.getKeyBean_3rd();            EkeyKeyBean keyBean_4th = totalkeyUsingBean.getKeyBean_4th();            EkeyKeyBean keyBean_sum = totalkeyUsingBean.getKeyBean_sum();            for (EkeyKeyUsingBean bean : initData) {                // 合计激活数                if (EkeyKeyUsingAction.USERTYPE_ACT.equals(userType)) {                    totalkeyUsingBean.setActCount(totalkeyUsingBean.getActCount() + bean.getActCount());                }                // 0号键合计使用人数、使用次数                EkeyKeyBean bean_start = bean.getKeyBean_start();                keyBean_start.setUsingUser(keyBean_start.getUsingUser() + bean_start.getUsingUser());                keyBean_start.setUsingTimes(keyBean_start.getUsingTimes() + bean_start.getUsingTimes());                // 1号键合计使用人数、使用次数                EkeyKeyBean bean_1st = bean.getKeyBean_1st();                keyBean_1st.setUsingUser(keyBean_1st.getUsingUser() + bean_1st.getUsingUser());                keyBean_1st.setUsingTimes(keyBean_1st.getUsingTimes() + bean_1st.getUsingTimes());                // 2号键合计使用人数、使用次数                EkeyKeyBean bean_2nd = bean.getKeyBean_2nd();                keyBean_2nd.setUsingUser(keyBean_2nd.getUsingUser() + bean_2nd.getUsingUser());                keyBean_2nd.setUsingTimes(keyBean_2nd.getUsingTimes() + bean_2nd.getUsingTimes());                // 3号键合计使用人数、使用次数                EkeyKeyBean bean_3rd = bean.getKeyBean_3rd();                keyBean_3rd.setUsingUser(keyBean_3rd.getUsingUser() + bean_3rd.getUsingUser());                keyBean_3rd.setUsingTimes(keyBean_3rd.getUsingTimes() + bean_3rd.getUsingTimes());                // 4号键合计使用人数、使用次数                EkeyKeyBean bean_4th = bean.getKeyBean_1st();                keyBean_4th.setUsingUser(keyBean_4th.getUsingUser() + bean_4th.getUsingUser());                keyBean_4th.setUsingTimes(keyBean_4th.getUsingTimes() + bean_4th.getUsingTimes());                // 合计使用人数、使用次数                EkeyKeyBean bean_sum = bean.getKeyBean_sum();                keyBean_sum.setUsingUser(keyBean_sum.getUsingUser() + bean_sum.getUsingUser());                keyBean_sum.setUsingTimes(keyBean_sum.getUsingTimes() + bean_sum.getUsingTimes());            }        }        initData.add(totalkeyUsingBean);        // 如果是查询所有激活用户，在设置“合计”行的合计激活人数的值为最后一个时间节点的激活人数        if (EkeyKeyUsingAction.USERTYPE_ALL.equals(userType)) {            totalkeyUsingBean.setActCount(initData.get(initData.size() - 2).getActCount());        }    }    /**     * 设置当天的合计使用人数和合计使用次数     *     * @param keyUsingBean     */    private void setSumCount(EkeyKeyUsingBean keyUsingBean) {        EkeyKeyBean keyBean_sum = keyUsingBean.getKeyBean_sum();        EkeyKeyBean keyBean_start = keyUsingBean.getKeyBean_start();        EkeyKeyBean keyBean_1st = keyUsingBean.getKeyBean_1st();        EkeyKeyBean keyBean_2nd = keyUsingBean.getKeyBean_2nd();        EkeyKeyBean keyBean_3rd = keyUsingBean.getKeyBean_3rd();        EkeyKeyBean keyBean_4th = keyUsingBean.getKeyBean_4th();        keyBean_sum.setUsingUser(keyBean_start.getUsingUser()                + keyBean_1st.getUsingUser()                + keyBean_2nd.getUsingUser()                + keyBean_3rd.getUsingUser()                + keyBean_4th.getUsingUser());        keyBean_sum.setUsingTimes(keyBean_start.getUsingTimes()                + keyBean_1st.getUsingTimes()                + keyBean_2nd.getUsingTimes()                + keyBean_3rd.getUsingTimes()                + keyBean_4th.getUsingTimes());    }    /**     * 留存用户数量     *     * @param supCode 供应商代码     * @param sDate   起始时间     * @param eDate   截止时间     * @return     */    @Override    public List<List<Object>> stayingUser(String uid, String supCode, String sDate, String eDate) {        List<List<Object>> reqList = new ArrayList<>();        /** 原始数据-日 */        Map<String, Object> map_day = userAnalyseServiceImpl.stayingUser(uid, supCode, sDate, eDate, "1", "", "5");        /** 留存率-日 */        Map<String, Map<String, String>> rateMap_day = countOfAllUsingUser("1", supCode, sDate, eDate, null);        Map<String, String> rate_day = rateMap_day.get("rate");// 留存率        // 时间集合        List<String> timeList_day = (List<String>) map_day.get("timeList");        timeList_day = timeList_day.subList(1, timeList_day.size());        // 数据集合        List<Map<String, Object>> dataMap_day = (List<Map<String, Object>>) map_day.get("dataMap");        /** 原始数据-周 */        Map<String, Object> timeMap_week = getTimeMap(sDate, eDate, "2");        Map<String, Object> dataMap_week = stayingUserOfWeekOrMonth(uid, supCode, timeMap_week);        List<Map<String, Object>> dataList_week = (List<Map<String, Object>>) dataMap_week.get("dataMap");        /** 留存率&周留存今日点击-周 */        Map<String, Map<String, String>> rateMap_week = countOfAllUsingUser("2", supCode, sDate, eDate, timeMap_week);        Map<String, String> rate_week = rateMap_week.get("rate");// 留存率        Map<String, String> click_week = rateMap_week.get("click");// 今日点击数        /** 原始数据-月 */        Map<String, Object> timeMap_month = getTimeMap(sDate, eDate, "3");        Map<String, Object> dataMap_month = stayingUserOfWeekOrMonth(uid, supCode, timeMap_month);        List<Map<String, Object>> dataList_month = (List<Map<String, Object>>) dataMap_month.get("dataMap");        /** 留存率&月留存今日点击-月 */        Map<String, Map<String, String>> rateMap_month = countOfAllUsingUser("3", supCode, sDate, eDate, timeMap_month);        Map<String, String> rate_month = rateMap_month.get("rate");// 留存率        Map<String, String> click_month = rateMap_month.get("click");// 今日点击数        for (int i = 0; i < timeList_day.size(); i++) {            String day = timeList_day.get(i);            List<Object> rowList = new ArrayList<>();            /** 列1. 时间 *///            rowList.add(day);            /** 列2. 日留存 */            if (StrUtils.isNotEmpty(dataMap_day)) {                for (Map<String, Object> data : dataMap_day) {                    List<String> dayData = (List<String>) data.get("data");                    rowList.add(StrUtils.zeroOrInt(dayData.get(i * 2)));                    break;                }            }            /** 列3. 日留存率 */            rowList.add(rate_day.get(day));            /** 列4. 周留存 */            for (int j = 0; j < dataList_week.size(); j++) {                Map<String, Object> weekMap = dataList_week.get(j);                List<String> data = (List<String>) weekMap.get("data");                int total_week = StrUtils.zeroOrInt(data.get(i));                rowList.add(String.valueOf(total_week));                break;            }            /** 列5. 周留存率 */            rowList.add(rate_week.get(day));            /** 列6. 月留存 */            int total_month = 0;            for (int j = 0; j < dataList_month.size(); j++) {                Map<String, Object> weekMap = dataList_month.get(j);                List<String> data = (List<String>) weekMap.get("data");                total_month += StrUtils.zeroOrInt(data.get(i));            }            rowList.add(String.valueOf(total_month));            /** 列7. 月留存率 */            rowList.add(rate_month.get(day));            /** 列8. 周留存今日点击数 */            rowList.add(click_week.get(day));            /** 列9. 月留存今日点击数 */            rowList.add(click_month.get(day));            reqList.add(rowList);// 添加一行数据        }        return reqList;    }    /**     * 留存用户数局查询     * <p/>     * 需求分析 ：     * 1：日留存---》本日启动：前天注册     * 2：周留存---》本日启动 ： 六天前注册     * 3：周7天内--》本日启动 ： 六天前注册  启动3天     * 4:月留存  --》本日启动 ： 29天前注册     *     * @param userId     * @param sup     * @param sDate     * @param eDate     * @return     */    @Override    public List<List<Object>> carryOverUser(String userId, String sup, String sDate, String eDate) {        List<List<Object>> carryOverUserList = new ArrayList<>();        List<Map<String, Object>> suppliers = new ArrayList<>();// 供应商        // 可见的供应商        suppliers = userAnalyseDao.visibleSupplier(userId, sup);        List<String> _sup = userAnalyseServiceImpl.getSupCodeList(suppliers);        String sDay = "";        String eDay = "";        /**日留存---》本日启动：前天注册   START*/        if (StrUtils.isNotEmpty(sDate)) {// 默认起始时间为今天的1天前            sDay = ApDateTime.dateAdd("d", -1, sDate, ApDateTime.DATE_TIME_YMD);        }        if (StrUtils.isNotEmpty(eDate)) {// 默认截止日期为今天            eDay = ApDateTime.dateAdd("d", -1, eDate, ApDateTime.DATE_TIME_YMD);        }        List<Map<String, Object>> dayRegisterUser = ekeyKeyUsingDao.registerUser(_sup, sDay, eDay);//注册        List<Map<String, Object>> dayActivityUser = ekeyKeyUsingDao.activityUser(_sup, sDay, eDay);//激活        List<Map<String, Object>> dayActivityUserCount = ekeyKeyUsingDao.activityUserCount(_sup, sDay, eDay);//激活数量        List<Map<String, Object>> dayRegisterCount = ekeyKeyUsingDao.registerCount(_sup, sDay, eDay);//注册数量        List<Map<String, Object>> dayStartUser = ekeyKeyUsingDao.startUser(_sup, sDate, eDate);//启动        /**日留存---》本日启动：前天注册   END*/        /**周留存和周内留存---》本日启动：6天前注册   START*/        if (StrUtils.isNotEmpty(sDate)) {// 默认起始时间为今天的1天前            sDay = ApDateTime.dateAdd("d", -6, sDate, ApDateTime.DATE_TIME_YMD);        }        if (StrUtils.isNotEmpty(eDate)) {// 默认截止日期为今天            eDay = ApDateTime.dateAdd("d", -6, eDate, ApDateTime.DATE_TIME_YMD);        }        List<Map<String, Object>> weekRegisterUser = ekeyKeyUsingDao.registerUser(_sup, sDay, eDay);//注册        List<Map<String, Object>> weekActivityUser = ekeyKeyUsingDao.activityUser(_sup, sDay, eDay);//激活        List<Map<String, Object>> weekActivityUserCount = ekeyKeyUsingDao.activityUserCount(_sup, sDay, eDay);//激活数量        List<Map<String, Object>> weekRegisterCount = ekeyKeyUsingDao.registerCount(_sup, sDay, eDay);//注册数量        List<Map<String, Object>> weekStartUser = ekeyKeyUsingDao.startUser(_sup, sDate, eDate);//启动        /**周留存和周内留存---》本日启动：6天前注册   END*/        /**月留存---》本日启动：29天前注册   START*/        if (StrUtils.isNotEmpty(sDate)) {// 默认起始时间为今天的1天前            sDay = ApDateTime.dateAdd("d", -29, sDate, ApDateTime.DATE_TIME_YMD);        }        if (StrUtils.isNotEmpty(eDate)) {// 默认截止日期为今天            eDay = ApDateTime.dateAdd("d", -29, eDate, ApDateTime.DATE_TIME_YMD);        }        List<Map<String, Object>> monthRegisterUser = ekeyKeyUsingDao.registerUser(_sup, sDay, eDay);//注册        List<Map<String, Object>> monthActivityUser = ekeyKeyUsingDao.activityUser(_sup, sDay, eDay);//激活        List<Map<String, Object>> monthActivityUserCount = ekeyKeyUsingDao.activityUserCount(_sup, sDay, eDay);//激活数量        List<Map<String, Object>> monthRegisterCount = ekeyKeyUsingDao.registerCount(_sup, sDay, eDay);//注册数量        List<Map<String, Object>> monthStartUser = ekeyKeyUsingDao.startUser(_sup, sDate, eDate);//启动        /**月留存---》本日启动：29天前注册   END*/        /** 获取时间集合*/        List<String> dayBetween = ApDateTime.getDayBetween(sDate, eDate);        for (String day_ : dayBetween) { //日期循环            List<Object> rowList = new ArrayList<>();            String sNow ="";            String eNow = "";            List<Map<String, Object>> weekNStartUser = new ArrayList<>();            String _sNow ="";            String _eNow ="";            List<Map<String, Object>> monthNStartUser = new ArrayList<>();            int totle=0;            /**日留存人数*/            int DayCount =getStartToatle(dayRegisterUser,dayStartUser,day_,1,1);            rowList.add(StrUtils.emptyOrString(DayCount));            totle= getToatle(dayRegisterCount,day_,-1);            rowList.add(getRate(DayCount,totle));            /**日激活人数**/            int DayActivityCount =getStartToatle(dayActivityUser,dayStartUser,day_,1,2);            rowList.add(StrUtils.emptyOrString(DayActivityCount));            totle= getToatle(dayActivityUserCount,day_,-1);            rowList.add(getRate(DayActivityCount,totle));            /**周留存人数**/            int WeekCount =getStartToatle(weekRegisterUser,weekStartUser,day_,6,3);            rowList.add(StrUtils.emptyOrString(WeekCount));            totle= getToatle(weekRegisterCount,day_,-6);            rowList.add(getRate(WeekCount,totle));            /**周激活数***/            int WeekActivityCount =getStartToatle(weekActivityUser,weekStartUser,day_,6,4);            rowList.add(StrUtils.emptyOrString(WeekActivityCount));            totle= getToatle(weekActivityUserCount,day_,-6);            rowList.add(getRate(WeekActivityCount,totle));            /**周内留存人数**/            sNow = ApDateTime.dateAdd("d", -6, day_, ApDateTime.DATE_TIME_YMD);            eNow = day_;            weekNStartUser = ekeyKeyUsingDao.weekNStartUser(_sup, sNow, eNow);            int WeekNCount = getNStartToatle(weekRegisterUser,weekNStartUser,day_,6,5,2);            rowList.add(StrUtils.emptyOrString(WeekNCount));            totle= getToatle(weekRegisterCount,day_,-6);            rowList.add(getRate(WeekNCount,totle));            /***周内激活***/            int WeekActivityNCount = getNStartToatle(weekActivityUser,weekNStartUser,day_,6,6,2);            rowList.add(StrUtils.emptyOrString(WeekActivityNCount));            totle= getToatle(weekActivityUserCount,day_,-6);            rowList.add(getRate(WeekActivityNCount,totle));            /**月留存*/            int MonthCount =getStartToatle(monthRegisterUser,monthStartUser,day_,29,7);            rowList.add(StrUtils.emptyOrString(MonthCount));            totle= getToatle(monthRegisterCount,day_,-29);            rowList.add(getRate(MonthCount,totle));            /***月激活数留存***/            int MonthActivityCount =getStartToatle(monthActivityUser,monthStartUser,day_,29,8);            rowList.add(StrUtils.emptyOrString(MonthActivityCount));            totle= getToatle(monthActivityUserCount,day_,-29);            rowList.add(getRate(MonthActivityCount,totle));            /**z月内留存**/            _sNow = ApDateTime.dateAdd("d", -29, day_, ApDateTime.DATE_TIME_YMD);            _eNow = day_;            monthNStartUser = ekeyKeyUsingDao.weekNStartUser(_sup, _sNow, _eNow);            int MonthNCount = getNStartToatle(monthRegisterUser,monthNStartUser,day_,6,9,6);            rowList.add(StrUtils.emptyOrString(MonthNCount));            totle= getToatle(monthRegisterCount,day_,-29);            rowList.add(getRate(MonthNCount,totle));            /****月内激活*****/            int MonthActivityNCount = getNStartToatle(monthActivityUser,monthNStartUser,day_,6,10,6);            rowList.add(StrUtils.emptyOrString(MonthActivityNCount));            totle= getToatle(monthActivityUserCount,day_,-29);            rowList.add(getRate(MonthActivityNCount,totle));            carryOverUserList.add(rowList);        }        return carryOverUserList;    }    /**     *     * @param allUserList  注册或激活的用户列表     * @param startUserList 启动列表     * @param day_ 循环的日期     * @param type -1 ： 日  ；-6 ：周   ；-29 ：月     * @param order　顺序     * @return     */    public int getStartToatle(List<Map<String, Object>> allUserList,List<Map<String, Object>> startUserList,String day_,int type,int order){       /* String text1="";        String text2="";        if("1".equals(order)){            text1="日注册";            text2="日启动";        }else if("2".equals(order)){            text1="日激活";            text2="日启动";        }else if("3".equals(order)){            text1="周注册";            text2="周启动";        }else if("4".equals(order)){            text1="周激活";            text2="周启动";        }else if("5".equals(order)){            text1="周内注册";            text2="周内启动";        }else if("6".equals(order)){            text1="周内激活";            text2="周内启动";        }else if("7".equals(order)){            text1="月注册";            text2="月启动";        }else if("8".equals(order)){            text1="月激活";            text2="月启动";        }else if("9".equals(order)){            text1="月内注册";            text2="月内启动";        }else if("10".equals(order)){            text1="月内激活";            text2="月内注册";        }else if("11".equals(order)){            text1="";            text2="";        }        System.out.println("=========================================="+text1+"开始================================================");*/        int count=0;        if (StrUtils.isNotEmpty(allUserList) && StrUtils.isNotEmpty(startUserList)) { //存在            for (Map allUserMap : allUserList) {//循环注册人数                String day = StrUtils.emptyOrString(allUserMap.get("DAY"));                String emei = StrUtils.emptyOrString(allUserMap.get("C_IMEI"));                if (ApDateTime.dateAdd("d", -type, day_, ApDateTime.DATE_TIME_YMD).equals(day)) {//和注册日期比较                    //System.out.println("1:查询日期（" + day_ + "）注册用户循环日期：（" + day + "）EMEL" + emei);                    for (Map startUserMap : startUserList) {//循环启动人数                        String  _day = StrUtils.emptyOrString(startUserMap.get("DAY"));                        String _emei = StrUtils.emptyOrString(startUserMap.get("C_IMEI"));                        if (ApDateTime.dateAdd("d", +type, day, ApDateTime.DATE_TIME_YMD).equals(_day) && emei.equals(_emei)) {                            count++;                            //System.out.println("2:查询日期（" + day_ + ")用户启动日期：" + _day + "）EMEL（" + _emei + "）数量：" + count);                        }                    }                }            }        } else {//不存在            count = 0;        }        //System.out.println("=========================================="+text1+"结束================================================");        return count;    }    /**     *     * @param allUserList  注册或激活的用户列表     * @param startUserList 月内或周内启动列表     * @param day_ 循环的日期     * @param type -1 ： 日  ；-6 ：周   ；-29 ：月     * @param order　顺序     * @return     */    public int getNStartToatle(List<Map<String, Object>> allUserList,List<Map<String, Object>> startUserList,String day_,int type,int order,int toatle){        int count=0;        if (StrUtils.isNotEmpty(allUserList) && StrUtils.isNotEmpty(startUserList)) {            for (Map allUserListMap : allUserList) {//循环注册人数                String day = StrUtils.emptyOrString(allUserListMap.get("DAY"));                String emei = StrUtils.emptyOrString(allUserListMap.get("C_IMEI"));                if (ApDateTime.dateAdd("d", -type, day_, ApDateTime.DATE_TIME_YMD).equals(day)) {                    //System.out.println("1:查询日期（" + day_ + "）注册用户循环日期：（" + day + "）EMEL" + emei);                    for (Map map : startUserList) {                        String e = StrUtils.emptyOrString(map.get("C_IMEI"));                        if (e.equals(emei)) {                            String sum = StrUtils.emptyOrString(map.get("SUM"));                            if (Integer.parseInt(sum) > toatle) {                                count++;                                //System.out.println("2:查询日期（" + day_ + "）EMEL（" + e + "）数量：(" + count+")启动数sum"+sum);                            }                        }                    }                }            }        } else {            count = 0;        }        return count;    }    /**     * 获取注册或激活单日期数量     * 循环的天 day_     *     * @return     */    public int getToatle( List<Map<String, Object>> comconMap,String day_ ,int type) {        for(Map map : comconMap){            String day = StrUtils.emptyOrString(map.get("DAY"));            String totle = StrUtils.emptyOrString(map.get("TOTAL"));                if (ApDateTime.dateAdd("d", type, day_, ApDateTime.DATE_TIME_YMD).equals(day)) {                    if(StrUtils.isEmpty(totle)){                        return 0;                    }else{                        return Integer.parseInt(totle);                    }                }        }        return 0;    }    /**     * 获取指定时间所有启动用户的总数     *     * @param timeType     时间类型 1.日，2.周，3.月     * @param supCode      供应商     * @param sDate        起始时间     * @param eDate        结束时间     * @param timeMap_week     * @return     */    private Map<String, Map<String, String>> countOfAllUsingUser(            String timeType, String supCode, String sDate, String eDate, Map<String, Object> timeMap_week) {        Map<String, Map<String, String>> rateMap = new HashMap<>();        if ("1".equals(timeType)) {            String oneDayBefore = ApDateTime.dateAdd("d", -1, sDate, ApDateTime.DATE_TIME_YMD);            // 查询指定时间每天启动的用户            List<Map<String, Object>> activeUser = ekeyKeyUsingDao.allUsingUser(supCode, oneDayBefore, eDate);            // 获取时间集合            List<String> dayBetween = ApDateTime.getDayBetween(oneDayBefore, eDate);            // 日期为key，该日期的活跃用户集合为value            Map<String, Set<String>> activeUserMap = new LinkedHashMap<>();            for (String eachDay : dayBetween) {                Set<String> imeiSet = new HashSet<>();                if (StrUtils.isNotEmpty(activeUser)) {                    for (int i = 0; i < activeUser.size(); i++) {                        Map<String, Object> data = activeUser.get(i);                        String day = StrUtils.emptyOrString(data.get("DAY"));                        if (eachDay.equals(day)) {                            imeiSet.add(StrUtils.emptyOrString(data.get("C_IMEI")));                        }                    }                }                activeUserMap.put(eachDay, imeiSet);            }            // 日期为key，该日期的留存用户集合为value            Map<String, Set<String>> stayUserMap = new LinkedHashMap<>();            for (int i = 0; i < dayBetween.size() - 1; i++) {                String eachDay_1 = dayBetween.get(i);                String eachDay_2 = dayBetween.get(i + 1);                Set<String> imeiSet_1 = activeUserMap.get(eachDay_1);                Set<String> imeiSet_2 = activeUserMap.get(eachDay_2);                Set<String> stayUserSet = new HashSet<>();                for (String imei_1 : imeiSet_1) {                    for (String imei_2 : imeiSet_2) {                        if (imei_1.equals(imei_2)) {                            stayUserSet.add(imei_2);                        }                    }                }                stayUserMap.put(eachDay_2, stayUserSet);            }            // 计算留存率            Map<String, String> rate = stayingRate(dayBetween, activeUserMap, stayUserMap);            rateMap.put("rate", rate);        } else {            LinkedHashMap<String, List<String>> weekMap = (LinkedHashMap<String, List<String>>) timeMap_week.get("weekMap");            List<String> list_0 = weekMap.get("0");// sDate所在周(月)的前一周(月)            String startDay_start = list_0.get(0);// 获取sDate前一周(月)的第一天            String startDay_end = list_0.get(list_0.size() - 1);// 获取sDate前一周(月)的最后一天sDate的前一天            // 查询数据            List<Map<String, Object>> activeUser = ekeyKeyUsingDao.allUsingUser(supCode, startDay_start, eDate);            // 获取时间集合            List<String> dayBetween = ApDateTime.getDayBetween(startDay_end, eDate);            // 日期为key，改日期所在周为value的Map            Map<String, List<String>> timeMap = new LinkedHashMap<>();            for (int i = 0; i < dayBetween.size(); i++) {                String eachDay = dayBetween.get(i);                List<String> dayList = weekMap.get(String.valueOf(i));                timeMap.put(eachDay, dayList);            }            // imei为key，imei的所有日期集合为value            Map<String, Set<String>> imeiMap = new HashMap<>();            for (int i = 0; i < activeUser.size(); i++) {                Map<String, Object> data = activeUser.get(i);                String day = StrUtils.emptyOrString(data.get("DAY"));                String imei = StrUtils.emptyOrString(data.get("C_IMEI"));                Set<String> daySet = imeiMap.get(imei);                if (StrUtils.isEmpty(daySet)) {                    daySet = new HashSet<>();                }                daySet.add(day);                imeiMap.put(imei, daySet);            }            LOGGER.info(" >>>>>>>>>>>>>>>>>>>>>>>  活跃用户数  >>>>>>>>>>>>>>>>>>>  " + imeiMap.size() + " <<<<<<<<<<<<<<<<<<<");            // 活跃用户集合--日期为key，该日期所在周的留存用户集合为value            Map<String, Set<String>> activeUserMap = new LinkedHashMap<>();            for (Map.Entry<String, List<String>> entry_time : timeMap.entrySet()) {                Set<String> stayUserSet = new HashSet<>();                String eachDay = entry_time.getKey();                List<String> dayList = entry_time.getValue();                for (Map.Entry<String, Set<String>> entry_imei : imeiMap.entrySet()) {                    String imei = entry_imei.getKey();                    Set<String> daySet = entry_imei.getValue();                    if (daySet.size() < 2) {// 如果该用户只有一天启动过，必然不是活跃用户                        continue;                    }                    int breakFlag = 0;                    boolean flag = false;                    for (String day : daySet) {                        if (dayList.contains(day)) {                            ++breakFlag;                        }                        if (breakFlag == 2) {                            flag = true;                            break;                        }                    }                    if (flag) {                        stayUserSet.add(imei);                    }                }                activeUserMap.put(eachDay, stayUserSet);            }            // 留存用户集合--日期为key，留存用户集合为value            Map<String, Set<String>> stayUserMap = new LinkedHashMap<>();            for (int i = 1; i < dayBetween.size(); i++) {                String day = dayBetween.get(i);                String day_before = ApDateTime.dateAdd("d", -1, day, ApDateTime.DATE_TIME_YMD);                Set<String> userSet_before = activeUserMap.get(day_before);// 上周（月）的活跃用户                Set<String> userSet_curr = activeUserMap.get(day);// 本周（月）的活跃用户                Set<String> stayUserSet = new HashSet<>();                for (String user_before : userSet_before) {                    for (String user_curr : userSet_curr) {                        if (user_curr.equals(user_before)) {                            stayUserSet.add(user_curr);                        }                    }                }                stayUserMap.put(day, stayUserSet);            }            // 计算留存率            Map<String, String> rate = stayingRate(dayBetween, activeUserMap, stayUserMap);            // 留存用户中今日点击的用户--日期为key，用户集合为value            Map<String, Set<String>> act_stay_user = new HashMap<>();            for (Map.Entry<String, Set<String>> entry : stayUserMap.entrySet()) {                String dayKey = entry.getKey();                Set<String> imeiSet = entry.getValue();                Set<String> act_stay_set = new HashSet<>();                for (Map<String, Object> user : activeUser) {                    String imei = StrUtils.emptyOrString(user.get("C_IMEI"));                    String day = StrUtils.emptyOrString(user.get("DAY"));                    if (imeiSet.contains(imei) && dayKey.equals(day)) {                        act_stay_set.add(imei);                    }                }                act_stay_user.put(dayKey, act_stay_set);            }            // 留存用户中今日点击的用户数            Map<String, String> clickMap = new HashMap<>();            for (int i = 1; i < dayBetween.size(); i++) {                String day = dayBetween.get(i);                Set<String> set = act_stay_user.get(day);                clickMap.put(day, StrUtils.emptyOrString(set.size()));            }            rateMap.put("rate", rate);            rateMap.put("click", clickMap);        }        return rateMap;    }    /**     * 计算留存率     *     * @param dayBetween  日期集合     * @param activeMap   活跃用户集合     * @param stayUserMap 留存用户集合     * @return     */    private Map<String, String> stayingRate(            List<String> dayBetween, Map<String, Set<String>> activeMap, Map<String, Set<String>> stayUserMap) {        Map<String, String> rateMap = new HashMap<>();        for (int i = 1; i < dayBetween.size(); i++) {            String day = dayBetween.get(i);            String day_before = ApDateTime.dateAdd("d", -1, day, ApDateTime.DATE_TIME_YMD);            Set<String> activeUser_before = activeMap.get(day_before);// 当天的前一天的活跃用户            Set<String> stayUser_today = stayUserMap.get(day);// 当天的留存用户（这一天的留存用户必是前一天的活跃用户）            String rate = getRate(stayUser_today.size(), activeUser_before.size());            rateMap.put(day, rate);        }        return rateMap;    }    public Map<String, Object> stayingUserOfWeekOrMonth(String userId, String sup, Map<String, Object> timeMap) {        Map<String, Object> reqMap = new HashMap<>();        List<Map<String, Object>> suppliers = new ArrayList<>();// 供应商        List<Map<String, Object>> dataList = new ArrayList<>();// 数据        try {            // 可见的供应商            suppliers = userAnalyseDao.visibleSupplier(userId, sup);            dataList = userAnalyseServiceImpl.stayingUserDataOfWeek(suppliers, timeMap);        } catch (Exception e) {            LOGGER.error("UserAnalyseOfDayServiceImpl.stayingUser failed ! e : ", e);        }        reqMap.put("suppliers", suppliers);        reqMap.put("dataMap", dataList);        return reqMap;    }    private Map<String, Object> getTimeMap(String sDate, String eDate, String timeType) {        Map<String, Object> map = new HashMap<>();        List<String> list = new ArrayList<>();        String severalDaysBef;        if ("2".equals(timeType)) {            severalDaysBef = ApDateTime.dateAdd("d", -7, sDate, ApDateTime.DATE_TIME_YMD);// sDate前一天所在周的第一天        } else {            severalDaysBef = ApDateTime.dateAdd("d", -30, sDate, ApDateTime.DATE_TIME_YMD);// sDate前一天所在月的第一天        }        list.add(severalDaysBef);        list.add(eDate);        // 周序号key，日期所在的周的每一天为value        Map<String, List<String>> weekMap = new LinkedHashMap<>();        // sDate的前一天        String dayBefore_sDate = ApDateTime.dateAdd("d", -1, sDate, ApDateTime.DATE_TIME_YMD);        // 获取第一周的前一周的每一天        List<String> weekBef_now = ApDateTime.getDayBetween(severalDaysBef, dayBefore_sDate);        weekMap.put("0", weekBef_now);        // 获取查询时间的总天数        int days = ApDateTime.daysBetween(sDate, eDate);        for (int i = 1; i <= days + 1; i++) {            String sDate_key = ApDateTime.dateAdd("d", i - 1, sDate, ApDateTime.DATE_TIME_YMD);// 每循环一次，key所用到的日期加1            int weekOrMonth = "2".equals(timeType) ? -6 : -29;            // sDate_key所在周/月的第一天            String sixDaysBef = ApDateTime.dateAdd("d", weekOrMonth, sDate_key, ApDateTime.DATE_TIME_YMD);            List<String> days_i = ApDateTime.getDayBetween(sixDaysBef, sDate_key);            weekMap.put(String.valueOf(i), days_i);        }        map.put("now", list);        map.put("weekMap", weekMap);        return map;    }    private static String getRate(int count, int total) {        DecimalFormat df = new DecimalFormat("#.00");        if (count == 0 || total == 0) {            return "0.00%";        } else {            double result = Double.parseDouble(df.format((double) count * 100 / total));            return result + "%";        }    }}