package com.org.mokey.analyse.dao.impl;

import com.org.mokey.analyse.dao.EkeyKeyUsingDao;
import com.org.mokey.util.StrUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by Maryn on 2016/4/5.
 */
@Repository
public class EkeyKeyUsingDaoImpl implements EkeyKeyUsingDao {

    private static final Log LOGGER = LogFactory.getLog(EkeyKeyUsingDaoImpl.class);

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Autowired
    private NamedParameterJdbcTemplate namedParameterJdbcTemplate;

    @Override
    // 查询激活用户数
    public List<Map<String, Object>> countOfActiveUsers(String timePattern, List<String> supCodes, String sDate, String eDate) {
        List<Map<String, Object>> list = new ArrayList<>();
        try {
            Map<String, Object> paramMap = new HashMap<>();
            paramMap.put("suppliers", supCodes);
            paramMap.put("sDate", sDate);
            paramMap.put("eDate", eDate);
            StringBuffer sql = new StringBuffer("SELECT * FROM (SELECT" +
                    " TO_CHAR(T.C_ACTIONDATE, '" + timePattern + "') DAY, COUNT(*) TOTAL" +
                    " FROM T_ACTION_ACTIVE T WHERE SUBSTR(T.C_ACTIVECODE, 6, 6) IN (:suppliers)" +
                    " AND T.C_ACTIONDATE >= TO_DATE(:sDate, '" + timePattern + "')" +
                    " AND T.C_ACTIONDATE < TO_DATE(:eDate, '" + timePattern + "') + 1" +
                    " GROUP BY TO_CHAR(T.C_ACTIONDATE, '" + timePattern + "')) ORDER BY DAY");
            list = namedParameterJdbcTemplate.queryForList(sql.toString(), paramMap);
        } catch (DataAccessException e) {
            LOGGER.error("EkeyKeyUsingDaoImpl.countOfActiveUsers failed ! e : ", e);
        }
        return list;
    }

    @Override
    // 查询指定时间段每个按键每天的使用人数
    public List<Map<String, Object>> countOfUsingUser(String timePattern, List<String> supCodes, String sDate, String eDate) {
        List<Map<String, Object>> list = new ArrayList<>();
        try {
            Map<String, Object> paramMap = new HashMap<>();
            paramMap.put("suppliers", supCodes);
            paramMap.put("sDate", sDate);
            paramMap.put("eDate", eDate);
            StringBuffer sql = new StringBuffer("SELECT DAY, KEY, COUNT(C_IMEI) TOTAL" +
                    " FROM (SELECT U.C_IMEI, TO_CHAR(U.C_ACTIONDATE, '" + timePattern + "') DAY, U.C_KEY KEY" +
                    " FROM T_ACTION_USEAPP U, T_ACTION_ACTIVE T WHERE U.C_IMEI = T.C_IMEI" +
                    " AND SUBSTR(T.C_ACTIVECODE, 6, 6) IN (:suppliers)" +
                    " AND U.C_ACTIONDATE >= TO_DATE(:sDate, '" + timePattern + "')" +
                    " AND U.C_ACTIONDATE < TO_DATE(:eDate, '" + timePattern + "') + 1" +
                    " GROUP BY U.C_IMEI, TO_CHAR(U.C_ACTIONDATE, '" + timePattern + "'), U.C_KEY)" +
                    " GROUP BY DAY, KEY ORDER BY DAY, KEY");
            list = namedParameterJdbcTemplate.queryForList(sql.toString(), paramMap);
        } catch (DataAccessException e) {
            LOGGER.error("EkeyKeyUsingDaoImpl.countOfUsingUser failed ! e : ", e);
        }
        return list;
    }

    @Override
    // 查询截至sDate这一时间之前激活用户数
    public long countOfActiveUsersUtilSDate(String timePattern, List<String> supCodes, String sDate) {
        try {
            Map<String, Object> paramMap = new HashMap<>();
            paramMap.put("suppliers", supCodes);
            paramMap.put("sDate", sDate);
            StringBuffer sql = new StringBuffer("SELECT COUNT(*) FROM T_ACTION_ACTIVE T" +
                    " WHERE SUBSTR(T.C_ACTIVECODE, 6, 6) IN (:suppliers)" +
                    " AND T.C_ACTIONDATE < TO_DATE(:sDate, '" + timePattern + "') + 1");
            return namedParameterJdbcTemplate.queryForObject(sql.toString(), paramMap, Integer.class);
        } catch (DataAccessException e) {
            LOGGER.error("EkeyKeyUsingDaoImpl.countOfActiveUsersUtilSDate failed ! e : ", e);
        }
        return 0;
    }

    @Override
    // 查询指定时间段每个按键每天的使用次数
    public List<Map<String, Object>> timesOfUsingUser(String timePattern, List<String> supCodes, String sDate, String eDate) {
        List<Map<String, Object>> list = new ArrayList<>();
        try {
            Map<String, Object> paramMap = new HashMap<>();
            paramMap.put("suppliers", supCodes);
            paramMap.put("sDate", sDate);
            paramMap.put("eDate", eDate);
            StringBuffer sql = new StringBuffer("SELECT TO_CHAR(U.C_ACTIONDATE, '" + timePattern + "') DAY," +
                    " U.C_KEY KEY, COUNT(U.C_KEY) TOTAL FROM T_ACTION_USEAPP U, T_ACTION_ACTIVE T" +
                    " WHERE U.C_IMEI = T.C_IMEI AND SUBSTR(T.C_ACTIVECODE, 6, 6) IN (:suppliers)" +
                    " AND U.C_ACTIONDATE >= TO_DATE(:sDate, '" + timePattern + "')" +
                    " AND U.C_ACTIONDATE < TO_DATE(:eDate, '" + timePattern + "') + 1" +
                    " GROUP BY TO_CHAR(U.C_ACTIONDATE, '" + timePattern + "'), U.C_KEY");
            list = namedParameterJdbcTemplate.queryForList(sql.toString(), paramMap);
        } catch (DataAccessException e) {
            LOGGER.error("EkeyKeyUsingDaoImpl.timesOfUsingUser failed ! e : ", e);
        }
        return list;
    }






















    @Override
    // 查询使用人数
    public List<Map<String, Object>> countOfAllUsingUser(String timePattern, List<String> supCodes, String sDate, String eDate) {
        List<Map<String, Object>> list = new ArrayList<>();
        try {
            Map<String, Object> paramMap = new HashMap<>();
            paramMap.put("suppliers", supCodes);
            paramMap.put("sDate", sDate);
            paramMap.put("eDate", eDate);

         /*   StringBuffer sql = new StringBuffer("SELECT DAY,COUNT(C_IMEI) TOTAL" +
                    " FROM (SELECT U.C_IMEI, TO_CHAR(U.C_ACTIONDATE, '" + timePattern + "') DAY" +
                    " FROM T_ACTION_USEAPP U, T_ACTION_ACTIVE T WHERE U.C_IMEI = T.C_IMEI" +
                    "  AND U.C_KEY = '0'AND SUBSTR(T.C_ACTIVECODE, 6, 6) IN (:suppliers)" +
                    " AND U.C_ACTIONDATE >= TO_DATE(:sDate, '" + timePattern + "')" +
                    " AND U.C_ACTIONDATE < TO_DATE(:eDate, '" + timePattern + "') + 1" +
                    " GROUP BY U.C_IMEI, TO_CHAR(U.C_ACTIONDATE, '" + timePattern + "'))" +
                    " GROUP BY DAY ORDER BY DAY");
*/
            StringBuffer sql = new StringBuffer ("SELECT  DAY,CODE, COUNT(C_IMEI) TOTAL" +
                    " FROM (SELECT SUBSTR(T.C_ACTIVECODE, 6, 6) CODE," +
                    " U.C_IMEI, TO_CHAR(U.C_ACTIONDATE, '" + timePattern + "') DAY" +
                    " FROM T_ACTION_USEAPP U, T_ACTION_ACTIVE T WHERE U.C_IMEI = T.C_IMEI" +
                    " AND U.C_KEY = '0' AND U.C_ACTIONDATE < TO_DATE(:eDate, '" + timePattern + "') + 1" +
                    " AND U.C_ACTIONDATE >= TO_DATE(:sDate, '" + timePattern + "')" +
                    " AND SUBSTR(T.C_ACTIVECODE, 6, 6) IN (:suppliers)" +
                    " GROUP BY SUBSTR(T.C_ACTIVECODE, 6, 6)," +
                    " U.C_IMEI, TO_CHAR(U.C_ACTIONDATE, '" + timePattern + "'))" +
                    " GROUP BY CODE, DAY ORDER BY CODE, DAY");

            list = namedParameterJdbcTemplate.queryForList(sql.toString(), paramMap);
        } catch (DataAccessException e) {
            LOGGER.error("EkeyKeyUsingDaoImpl.countOfUsingUser failed ! e : ", e);
        }
        return list;
    }


















    @Override
    // 查询该时间段所有启动过的用户
    public List<Map<String, Object>> allUsingUser(String supCode, String sDate, String eDate) {
        List<Map<String, Object>> list = new ArrayList<>();
        try {
            String sql = "SELECT U.C_IMEI, TO_CHAR(U.C_ACTIONDATE, 'yyyy-MM-dd') DAY" +
                    " FROM T_ACTION_ACTIVE T, T_ACTION_USEAPP U WHERE T.C_IMEI = U.C_IMEI" +
                    " AND U.C_ACTIONDATE >= TO_DATE(?, 'yyyy-MM-dd')" +
                    " AND U.C_ACTIONDATE < TO_DATE(?, 'yyyy-MM-dd') + 1 AND U.C_KEY = '0'" +
                    " AND U.C_IMEI NOT IN ('0', '000000000000000')";
            List<Object> args = new ArrayList<>();
            args.add(sDate);
            args.add(eDate);
            if (!"0".equals(supCode)) {
                sql += " AND SUBSTR(T.C_ACTIVECODE, 6, 6) = ?";
            }
            sql += " GROUP BY U.C_IMEI, TO_CHAR(U.C_ACTIONDATE, 'yyyy-MM-dd') ORDER BY TO_CHAR(U.C_ACTIONDATE, 'yyyy-MM-dd')";

            list = jdbcTemplate.queryForList(sql, args.toArray());

        } catch (DataAccessException e) {
            LOGGER.error("UserAnalyseOfDayDaoImpl.stayingDataAllMonth failed ! e :", e);
        }
        return list;
    }

//    @Override
//    public List<Map<String, Object>> countOfAllUsingUser(String supCode, String sDate, String eDate) {
//        List<Map<String, Object>> list = new ArrayList<>();
//        try {
//            String sql = "SELECT SUM(CT) CNT, DAY FROM (" +
//                    " SELECT COUNT(U.C_IMEI) CT, TO_CHAR(U.C_ACTIONDATE, 'yyyy-MM-dd') DAY" +
//                    " FROM T_ACTION_ACTIVE T, T_ACTION_USEAPP U WHERE T.C_IMEI = U.C_IMEI" +
//                    " AND U.C_ACTIONDATE >= TO_DATE(?, 'yyyy-MM-dd')" +
//                    " AND U.C_ACTIONDATE < TO_DATE(?, 'yyyy-MM-dd') + 1 AND U.C_KEY = '0'" +
//                    " AND U.C_IMEI NOT IN ('0', '000000000000000')";
//            List<Object> args = new ArrayList<>();
//            args.add(sDate);
//            args.add(eDate);
//            if (!"0".equals(supCode)) {
//                sql += " AND SUBSTR(T.C_ACTIVECODE, 6, 6) = ?";
//            }
//            sql += " GROUP BY U.C_IMEI, TO_CHAR(U.C_ACTIONDATE, 'yyyy-MM-dd')) GROUP BY DAY ORDER BY DAY";
//
//            list = jdbcTemplate.queryForList(sql, args.toArray());
//
//        } catch (DataAccessException e) {
//            LOGGER.error("UserAnalyseOfDayDaoImpl.stayingDataAllMonth failed ! e :", e);
//        }
//        return list;
//    }


}
