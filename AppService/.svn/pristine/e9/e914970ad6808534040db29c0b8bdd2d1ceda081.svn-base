package com.alipay.servlet;

import com.alipay.config.AlipayConfig;
import com.alipay.sign.RSA;
import com.sys.ekey.freecall.common.FeiyuOrderUtil;
import com.sys.ekey.freecall.service.FeiyuCloudService;
import com.sys.util.FileUtil;
import com.sys.util.StrUtils;
import com.sys.util.encrypt.Base64;
import com.unionpay.acp.sdk.LogUtil;
import net.sf.json.JSONObject;
import org.springframework.web.context.support.WebApplicationContextUtils;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by Maryn on 2016/4/15.
 */
public class FeiyuCloudSign extends HttpServlet {

    @Override
    public void init(ServletConfig config) throws ServletException {

        super.init(config);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {
        Map<String, String> resultMap = new HashMap<String, String>();

        /** 1.组装参数 */
        /**
         *     service             接口名称，固定值                 mobile.securitypay.pay
         *     partner             签约的支付宝唯一用户号            2088101568358171
         *     seller_id           卖家支付宝账号
         *     _input_charset      参数编码字符集                   utf-8
         *     sign_type           签名方式                        RSA
         *     notify_url          服务器异步通知页面路径
         *     payment_type        支付类型,默认值为：1（商品购买）
         *     subject             商品名称
         *     body                商品详情描述信息
         *     out_trade_no        商户网站唯一订单号
         *     total_fee           总金额,精确到小数点后两位[0.01，100000000.00]
         *     sign                签名
         *
         */

        String service = FileUtil.getConfig("acp_sdk", "aliPay.method.mobile");
        String notify_url = FileUtil.getConfig("acp_sdk", "baseUrl") + "/servlet/FeiyuCloudNotify";
        String payment_type = FileUtil.getConfig("acp_sdk", "aliPay.payment.type.buyproduct");

        /** 1.获取参数 */
        String id = req.getParameter("id");// 套餐id
        String fyAccountId = req.getParameter("fyAccountId");// 飞语云账号
        String out_trade_no = req.getParameter("out_trade_no");// 订单号（为空则是新订单，不为空则是之前生成而未支付的订单）


        FeiyuCloudService feiyuCloudService = WebApplicationContextUtils.
                getRequiredWebApplicationContext(getServletContext()).getBean(FeiyuCloudService.class);

        /** 2.生成订单 */
        String total_fee = "";
        String subject = "";// 商品名称
        String body = "";// 商品详情描述信息
        try {
            if (StrUtils.isNotEmpty(out_trade_no)) {// 根据商品id查询商品信息
                List<Map<String, Object>> orders = feiyuCloudService.getOrderByTradeNo(out_trade_no);
                if (StrUtils.isNotEmpty(orders)) {
                    Map<String, Object> order = orders.get(0);
                    // TODO 待处理 -- 已存在的订单
                }
            } else {// 生成新订单
                // 查询套餐详情
                List<Map<String, Object>> combos = feiyuCloudService.getComboById(id);
                if (StrUtils.isNotEmpty(combos)) {
                    Map<String, Object> combo = combos.get(0);
                    // 价格
                    String c_price = StrUtils.emptyOrString(combo.get("C_PRICE"));
                    String c_time = StrUtils.emptyOrString(combo.get("C_TIME"));
                    DecimalFormat df = new DecimalFormat("0.00");
                    total_fee = df.format(Double.valueOf(c_price));
                    // 生成订单，返回订单号
                    out_trade_no = FeiyuOrderUtil.outTradeNo(fyAccountId);
                    feiyuCloudService.insertOrder(out_trade_no, fyAccountId, c_price, c_time, "2");
                }
            }
        } catch (Exception e) {
            LogUtil.writeErrorLog("记录订单信息错误！", e);
        }

        /** 3.拼接参数 */
        StringBuffer buffer = new StringBuffer();
        buffer.append("service=\"" + service + "\"");
        buffer.append("&partner=\"" + AlipayConfig.partner + "\"");
        buffer.append("&seller_id=\"" + AlipayConfig.seller_id + "\"");
        buffer.append("&_input_charset=\"" + AlipayConfig.input_charset + "\"");
        buffer.append("&sign_type=\"" + AlipayConfig.sign_type + "\"");
        buffer.append("&notify_url=\"" + notify_url + "\"");
        buffer.append("&payment_type=\"" + payment_type + "\"");
        buffer.append("&subject=\"" + subject + "\"");
        buffer.append("&body=\"" + _decode(body) + "\"");
        buffer.append("&out_trade_no=\"" + out_trade_no + "\"");
        buffer.append("&total_fee=\"" + total_fee + "\"");

        /** 4.加密 */
        String sign = RSA.sign(buffer.toString(), AlipayConfig.private_key, AlipayConfig.input_charset);
        buffer.append("&sign=\"" + sign + "\"");

        /** 5.返回 */
        resp.getWriter().write(JSONObject.fromObject(buffer).toString());
    }

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {
        doPost(req, resp);
    }

    private String _decode(String value) {
        if (value != null) {
            value = value.trim();
            try {
                value = Base64.decode(value);
            } catch (Exception e) {
                LogUtil.writeErrorLog("转码错误！", e);
            }
        }

        return value;
    }

}
