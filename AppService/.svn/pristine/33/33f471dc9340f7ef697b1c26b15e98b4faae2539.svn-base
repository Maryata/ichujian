package com.sys.ekey.shop.action;

import com.sys.commons.AbstractAction;
import com.sys.ekey.shop.common.EKShopException;
import com.sys.ekey.shop.service.ShopService;
import com.sys.ekey.task.service.EKTaskService;
import com.sys.service.ExchangeService;
import com.sys.util.ApDateTime;
import com.sys.util.JSONUtil;
import com.sys.util.StrUtils;
import net.sf.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;

import java.text.SimpleDateFormat;
import java.util.*;

/**
 * 商城 接口
 * Created by vpc on 2016/4/15.
 */
@Component("shopAction")
public class ShopAction extends AbstractAction {

    @Autowired
    private ShopService shopService;

    @Autowired
    private ExchangeService exchangeService;

    @Autowired
    private EKTaskService eKTaskService;

    /**
     * 1.签到奖励列表
     * 2.连续签到天数
     * 3.签到详情
     * 4.本月累计签到天数
     * 5.可用积分
     * 6.可领取的积分
     * <p/>
     * 参数  用户uid
     *
     * @return
     */
    public String shopSign() {
        log.info("into ShopAction shopSign ...");
        Map<String, Object> retMap = new HashMap<String, Object>();
        String uid = getParameter("uid"); //getParameter("uid");
        log.info("uid -->" + uid);
   /*     if (StringUtils.isEmpty(uid)) {//用户未登录  签到奖励
            List<Map<String, Object>> signAwardList = shopService.signAward(uid);//签到奖励
            retMap.put("signAward", signAwardList);
            retMap.put("status", "Y");
        } else {*/
             /************签到***********/
            eKTaskService.reward(uid,"4","26",null);


            List<Map<String, Object>> signAwardList = shopService.signAward(uid);//签到奖励
            retMap.put("signAward", signAwardList);

           /* List<Map<String, Object>> signAwardSeriesList = shopService.signAwardSeries();//累计签到奖励
            retMap.put("signAwardSeries", signAwardSeriesList);*/

            List<Map<String, Object>> signDetailList = shopService.signDettail(uid);//签到详情
            retMap.put("signDettail", signDetailList);
            // 2.连续签到天数
            Integer seq = 1;
            // 获取今天
            Calendar c = Calendar.getInstance();
            int day = c.get(Calendar.DAY_OF_MONTH);// 日期
            Date today = new Date();
            SimpleDateFormat ymFormat = new SimpleDateFormat("yyyy-MM");
            SimpleDateFormat ymdFormat = new SimpleDateFormat("yyyy-MM-dd");

            if (StrUtils.isNotEmpty(signDetailList)) {
                Map<String, Object> latestDate = signDetailList.get(signDetailList.size()-1);// 上一次签到
                Object seqObj = latestDate.get("C_SEQ");
                Object dateObj = latestDate.get("C_DATE");
                String c_seq = StrUtils.emptyOrString(seqObj);
                String c_date = StrUtils.emptyOrString(dateObj);
                Integer i_seq = Integer.valueOf(c_seq);
                if (1 == day) {
                    // 如果今天是1号，seq = 1
                    seq = 1;
                } else {
                    if (StrUtils.isNotEmpty(seqObj)) {
                        // 昨天
                        String yesterday = ApDateTime.dateAdd("d", -1, new Date(), ApDateTime.DATE_TIME_YMD);
                        if (yesterday.equals(c_date)) {
                            // 如果昨天签到了，seq + 1
                            seq = i_seq + 1;
                        }else{
                            seq= i_seq;
                        }

                    } else {
                        log.error("WRONG SEQ IN [T_EK_MEMBER_SIGN], UID = "
                                + uid + ", DATE = " + ymdFormat.format(today));
                    }
                }
            }
            retMap.put("ContiAttendance", seq);//连续签到天数

            int signCountDay = shopService.signCountDay(uid);//本月累计签到天数
            retMap.put("signCountDay", signCountDay);

            int kyScore = shopService.availableIntegral(uid);//可用积分
            retMap.put("kyScore", kyScore);

            int hdScore = shopService.securableIntegral(uid);//可获得积分
            retMap.put("hdScore", hdScore);

            retMap.put("status", "Y");
        //}

        try {
            writeToResponse(JSONObject.fromObject(retMap).toString());
        } catch (Exception ex) {
            retMap.put("status", "N");
            retMap.put("info", "1003," + ex.getMessage());
            log.error("积分信息数据写出错误！", ex);
        }
        return NONE;
    }

    /**
     * 我的任务列表
     *
     * @return
     */
    public String task() {
        log.info("into ShopAction task ...");
        Map<String, Object> retMap = new HashMap<String, Object>();
        String uid = getParameter("uid");//getParameter("uid");
        log.info("uid -->" + uid);
        List<Map<String, Object>> taskList = shopService.task(uid);//任务列表
        retMap.put("tasks", taskList);
        retMap.put("status", "Y");

        try {
            writeToResponse(JSONObject.fromObject(retMap).toString());
        } catch (Exception ex) {
            retMap.put("status", "N");
            retMap.put("info", "1003," + ex.getMessage());
            log.error("我的积分信息数据写出错误！", ex);
        }
        return NONE;
    }

    /**
     * 分享赢好礼
     *
     * @return
     */
    public String share() {
        log.info("into ShopAction share ...");
        Map<String, Object> retMap = new HashMap<String, Object>();
        String uid = getParameter("uid"); //getParameter("uid");
        log.info("uid -->" + uid);

        int inviteNumber = shopService.inviteNumber(uid);//邀请人数
        retMap.put("inviteNumber", inviteNumber);

        String inviteCode = shopService.inviteCode(uid);//邀请码
        retMap.put("inviteCode", inviteCode);
        retMap.put("status", "Y");

        try {
            writeToResponse(JSONObject.fromObject(retMap).toString());
        } catch (Exception ex) {
            retMap.put("status", "N");
            retMap.put("info", "1003," + ex.getMessage());
            log.error("分享赢豪礼信息数据写出错误！", ex);
        }
        return NONE;
    }

    /**
     * 邀请详情
     *
     * @return
     */
    public String inviteDetail() {
        log.info("into ShopAction inviteDetail ...");
        Map<String, Object> retMap = new HashMap<String, Object>();
        String uid = getParameter("uid");//getParameter("uid");
        log.info("uid -->" + uid);

        int inviteNumber = shopService.inviteNumber(uid);//邀请人数
        retMap.put("inviteNumber", inviteNumber);

        int inviteAward = shopService.inviteAward(uid);//邀请奖励积分
        retMap.put("inviteAward", inviteAward);

        List<Map<String, Object>> inviteDetailList = shopService.inviteDetail(uid);//邀请详情
        retMap.put("inviteDetails", inviteDetailList);
        retMap.put("status", "Y");

        try {
            writeToResponse(JSONObject.fromObject(retMap).toString());
        } catch (Exception ex) {
            retMap.put("status", "N");
            retMap.put("info", "1003," + ex.getMessage());
            log.error("邀请详情数据写出错误！", ex);
        }
        return NONE;
    }

    /**
     * 查询商品列表
     *
     * @return
     */
    public String commodity() {
        log.info("into ShopAction commodity ...");
        Map<String, Object> retMap = new HashMap<String, Object>();


        // 页码，每页显示数量
        String sPageNumber = getParameter("pageNumber"),
                sPageSize = getParameter("pageSize");
        int pageNumber = 1, pageSize = 20; // 默认第一页，每页20条数据
        if (!StringUtils.isEmpty(sPageNumber)) {
            pageNumber = Integer.parseInt(sPageNumber);
        }
        if (!StringUtils.isEmpty(sPageSize)) {
            pageSize = Integer.parseInt(sPageSize);
        }

        String cid="1";
        List<Map<String, Object>> commoditys = shopService.commodity(cid,pageNumber, pageSize);//商品列表
        retMap.put("commoditys", JSONUtil.clobToString(commoditys));
        retMap.put("status", "Y");
        try {
            writeToResponse(JSONObject.fromObject(retMap).toString());
        } catch (Exception ex) {
            retMap.put("status", "N");
            retMap.put("info", "1003," + ex.getMessage());
            log.error("上品列表数据写出错误！", ex);
        }
        return NONE;
    }

    /**
     * 查询 积分 头像
     *
     * @return
     */
    public String integral() {
        log.info("into ShopAction Integral ...");
        Map<String, Object> retMap = new HashMap<String, Object>();
        String uid = getParameter("uid"); //getParameter("uid");
        log.info("uid -->" + uid);

        int kyScore = shopService.availableIntegral(uid);//可用积分
        retMap.put("kyScore", kyScore);

        String logo = shopService.logo(uid);//头像
        retMap.put("logo", logo);
        retMap.put("status", "Y");

        try {
            writeToResponse(JSONObject.fromObject(retMap).toString());
        } catch (Exception ex) {
            retMap.put("status", "N");
            retMap.put("info", "1003," + ex.getMessage());
            log.error("积分、头像数据写出错误！", ex);
        }
        return NONE;
    }

    /**
     * 商品详情
     *
     * @return
     */
    public String commodityDetail() {
        String pid = getParameter("pid"); //getParameter("pid");
        log.info("into ShopAction commodity ...");
        Map<String, Object> retMap = new HashMap<String, Object>();
        String state = "";
        List<Map<String, Object>> commodityDetail = shopService.commodityDetail(pid);//商品详情
        retMap.put("commodityDetail", JSONUtil.clobToString(commodityDetail));
        retMap.put("status", "Y");
        Map<String, Object> types = commodityDetail.get(0);
        String type = StrUtils.emptyOrString(types.get("C_TYPE"));
        if ("1".equals(type)) {//虚拟
            if (shopService.getCount(pid) > 0) {
                state = "1";
            } else {
                state = "0";
            }
        } else {//实物
            if (Integer.parseInt(StrUtils.emptyOrString(types.get("C_TOTAL"))) > 0) {
                state = "1";
            } else {
                state = "0";
            }
        }
        retMap.put("state", state);
        try {
            writeToResponse(JSONObject.fromObject(retMap).toString());
        } catch (Exception ex) {
            retMap.put("status", "N");
            retMap.put("info", "1003," + ex.getMessage());
            log.error("商品详情数据写出错误！", ex);
        }
        return NONE;
    }

    /**
     * 积分获取记录
     *
     * @return
     */
    public String gainRecords() {
        log.info("into ShopAction gainRecords ...");
        String uid = getParameter("uid"); ////getParameter("uid");
        log.info("uid -->" + uid);

        // 页码，每页显示数量
        String sPageNumber = getParameter("pageNumber"),
                sPageSize = getParameter("pageSize");
        int pageNumber = 1, pageSize = 20; // 默认第一页，每页20条数据
        if (!StringUtils.isEmpty(sPageNumber)) {
            pageNumber = Integer.parseInt(sPageNumber);
        }
        if (!StringUtils.isEmpty(sPageSize)) {
            pageSize = Integer.parseInt(sPageSize);
        }

        Map<String, Object> retMap = new HashMap<String, Object>();
        List<Map<String, Object>> gainRecords = shopService.gainRecords(uid, pageNumber, pageSize);//积分获取记录
        retMap.put("gainRecords", gainRecords);
        retMap.put("status", "Y");
        try {
            writeToResponse(JSONObject.fromObject(retMap).toString());
        } catch (Exception ex) {
            retMap.put("status", "N");
            retMap.put("info", "1003," + ex.getMessage());
            log.error("积分获取数据写出错误！", ex);
        }
        return NONE;
    }

    /**
     * 积分使用记录
     *
     * @return
     */
    public String useRecords() {
        log.info("into ShopAction useRecords ...");
        String uid = getParameter("uid"); //"1";//getParameter("uid");
        log.info("uid -->" + uid);

        // 页码，每页显示数量
        String sPageNumber = getParameter("pageNumber"),
                sPageSize = getParameter("pageSize");
        int pageNumber = 1, pageSize = 20; // 默认第一页，每页20条数据
        if (!StringUtils.isEmpty(sPageNumber)) {
            pageNumber = Integer.parseInt(sPageNumber);
        }
        if (!StringUtils.isEmpty(sPageSize)) {
            pageSize = Integer.parseInt(sPageSize);
        }

        Map<String, Object> retMap = new HashMap<String, Object>();
        List<Map<String, Object>> useRecords = shopService.useRecords(uid, pageNumber, pageSize);//积分获取记录
        retMap.put("useRecords", useRecords);
        retMap.put("status", "Y");
        try {
            writeToResponse(JSONObject.fromObject(retMap).toString());
        } catch (Exception ex) {
            log.info("into ShopAction useRecords ...");
            retMap.put("status", "N");
            retMap.put("info", "1003," + ex.getMessage());
            log.error("积分获取数据写出错误！", ex);
        }
        return NONE;
    }

    // 商品兑换
    public String exchangeList() {
        log.info("into ShopAction exchangeList ...");
        Map<String, Object> retMap = new HashMap<>();
        String uid = getParameter("uid");
        String pageIndex = getParameter("pageIndex");
        String pSize = getParameter("pSize");
        log.info("uid = " + uid + ", pageIndex = " + pageIndex + ", pSize = " + pSize);

        try {
            List<Map<String, Object>> exchangeList = shopService.exchangeList(uid, pageIndex, pSize);
            retMap.put("list", exchangeList);
            retMap.put("status", "Y");
        } catch (Exception e) {
            retMap.put("status", "N");
            retMap.put("info", "1003, e :" + e.getMessage());
        }

        try {
            writeToResponse(JSONObject.fromObject(retMap).toString());
        } catch (Exception ex) {
            log.error("虚拟商品兑换数据写出错误！", ex);
        }
        return NONE;
    }

    // 商品首页广告
    public String advert() {
        log.info("into ShopAction advert ...");
        Map<String, Object> retMap = new HashMap<>();

        try {
            List<Map<String, Object>> advert = shopService.advert();
            retMap.put("list", advert);
            retMap.put("status", "Y");
        } catch (Exception e) {
            retMap.put("status", "N");
            retMap.put("info", "1003, e :" + e.getMessage());
        }

        try {
            writeToResponse(JSONObject.fromObject(retMap).toString());
        } catch (Exception ex) {
            log.error("虚拟商品兑换数据写出错误！", ex);
        }
        return NONE;
    }


    /**
     * 跳转到订单页（查询商品数量）
     *
     * @return
     */
    public String matterToOrder() {
        String pid = getParameter("pid"); //getParameter("pid");
        String uid = getParameter("uid"); //getParameter("uid");
        log.info("into ShopAction matterToOrder ...");
        Map<String, Object> retMap = new HashMap<String, Object>();
        Map<String, Object> addMap =new HashMap<String, Object>();
        List<Map<String, Object>> matterToOrder = shopService.matterToOrder(uid,pid);//商品
        Map<String, Object> shopMap =matterToOrder.get(0);
        String type =StrUtils.emptyOrString(shopMap.get("C_TYPE"));
        //
        if("1".equals(type)){
            int count =shopService.getCount(pid);
            shopMap.put("C_TOTAL",count);
            matterToOrder.clear();
            matterToOrder.add(shopMap);
        }else{
            //查询是否存在订单
            List<Map<String, Object>> list = shopService.isExit(uid);
            if(StrUtils.isNotEmpty(list)) {
                addMap = list.get(0);
            }
            if (StringUtils.isEmpty(StrUtils.emptyOrString(addMap.get("C_RECV_PHONE")))) {
                List<Map<String, Object>> address = shopService.address(uid);//用户地址信息
                retMap.put("address", address);
            } else {
                retMap.put("address", list);
            }
        }
        retMap.put("matter", matterToOrder);
        retMap.put("status", "Y");

        try {
            writeToResponse(JSONObject.fromObject(retMap).toString());
        } catch (Exception ex) {
            retMap.put("status", "N");
            retMap.put("info", "1003," + ex.getMessage());
            log.error("商品数量数据写出错误！", ex);
        }
        return NONE;
    }

    // 生成虚拟商品订单
    public String virtualOrder() {
        String uid = getParameter("uid");// 用户id
        String pid = getParameter("pid");// 商品id
        String amount = getParameter("amount");// 兑换数量
        log.info("into ShopAction virtualOrder ...");
        log.info("uid = " + uid + ", pid = " + pid + ", amount = " + amount);
        Map<String, Object> retMap = new HashMap<>();

        try {
            // 查询商品详情
            List<Map<String, Object>> product = shopService.commodityDetail(pid);
            // 生成订单
            boolean result = shopService.virtualOrder(uid, product, amount);
            if (result) {
                // 设置订单总花费
                product.get(0).put("amount", amount);
                JSONUtil.clobToString(product);
                retMap.put("success", "1");
                retMap.put("info", product);
            }
            retMap.put("status", "Y");
        } catch (Exception e) {
            if (e instanceof EKShopException) {
                retMap.put("success", "0");
                retMap.put("info", e.getMessage());
                retMap.put("status", "N");
            } else {
                retMap.put("status", "N");
                retMap.put("info", "1003, e :" + e.getMessage());
            }
        }

        try {
            writeToResponse(JSONObject.fromObject(retMap).toString());
        } catch (Exception ex) {
            log.error("virtualOrder 写出错误！", ex);
        }
        return NONE;
    }

    /**
     * 兑换结果
     *
     * @return
     */
    public String changeResult() {
        String out_trade_no = getParameter("out_trade_no");
        log.info("into ShopAction changeResult ...");
        Map<String, Object> retMap = new HashMap<String, Object>();
        List<Map<String, Object>> changeResult = shopService.changeResult(out_trade_no);//兑换记录
        retMap.put("changeResult", changeResult);
        retMap.put("status", "Y");
        try {
            writeToResponse(JSONObject.fromObject(retMap).toString());
        } catch (Exception ex) {
            retMap.put("status", "N");
            retMap.put("info", "1003," + ex.getMessage());
            log.error("兑换记录数据写出错误！", ex);
        }
        return NONE;
    }

    /**
     * 支付回调测试
     *
     * @return
     */
    public String test() {
        Map<String,String> params = new HashMap<>();
        params.put("out_trade_no","1462071079129");
       /* params.put("out_trade_no","2016042844188321910710");
        shopService.updatePayStatus(params, "2","3");*/
        exchangeService.update("1462071079129");
        return NONE;
    }

}
